"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[4720],{1146:e=>{e.exports=JSON.parse('{"permalink":"/2023/12/18/external-dns-workload-identity","editUrl":"https://github.com/appdevgbb/gbb-blog/tree/main/docusaurus/blog/2023-12-18/external-dns-workload-identity/index.md","source":"@site/blog/2023-12-18/external-dns-workload-identity/index.md","title":"Using External DNS in AKS with Azure Workload Identity","description":"The External DNS project supports auto record creation in both Azure public and Private DNS Zones. In this walk through we\'ll show how to configure an install External DNS in an AKS cluster using Workload Identity to update A records in an Azure Private DNS Zone","date":"2023-12-18T00:00:00.000Z","tags":[],"readingTime":6.28,"hasTruncateMarker":true,"authors":[{"name":"Steve Griffith","title":"Principal Cloud Architect, Azure Global Black Belt","url":"https://github.com/swgriffith","socials":{"x":"https://x.com/SteveGriffith","github":"https://github.com/swgriffith"},"imageURL":"https://github.com/swgriffith.png","key":"steve_griffith","page":null}],"frontMatter":{"authors":["steve_griffith"],"date":"2023-12-18","description":"The External DNS project supports auto record creation in both Azure public and Private DNS Zones. In this walk through we\'ll show how to configure an install External DNS in an AKS cluster using Workload Identity to update A records in an Azure Private DNS Zone","tags":[],"title":"Using External DNS in AKS with Azure Workload Identity"},"unlisted":false,"prevItem":{"title":"Using Workload Idenity to Access Azure Blob Storage","permalink":"/2023/12/19/workload-identity-blob-example"},"nextItem":{"title":"Using Linux Capabilities in AKS","permalink":"/2023/11/27/capabilities-in-aks"}}')},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var r=t(6540);const a={},o=r.createContext(a);function s(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(o.Provider,{value:n},e.children)}},8885:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var r=t(1146),a=t(4848),o=t(8453);const s={authors:["steve_griffith"],date:"2023-12-18",description:"The External DNS project supports auto record creation in both Azure public and Private DNS Zones. In this walk through we'll show how to configure an install External DNS in an AKS cluster using Workload Identity to update A records in an Azure Private DNS Zone",tags:[],title:"Using External DNS in AKS with Azure Workload Identity"},i="External DNS with Azure Private Zones and Workload Identity",l={authorsImageUrls:[void 0]},d=[{value:"Set Environment Variables",id:"set-environment-variables",level:3},{value:"Create the Resource Group and Vnet",id:"create-the-resource-group-and-vnet",level:3},{value:"Create the Private DNS Zone",id:"create-the-private-dns-zone",level:3},{value:"Create the AKS Cluster",id:"create-the-aks-cluster",level:3},{value:"Setup with Workload Identity",id:"setup-with-workload-identity",level:3},{value:"Install External DNS",id:"install-external-dns",level:3},{value:"Test External DNS",id:"test-external-dns",level:3},{value:"Create a Record for a Pod IP",id:"create-a-record-for-a-pod-ip",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["The following walk-through shows how to use the ",(0,a.jsx)(n.a,{href:"https://github.com/kubernetes-sigs/external-dns",children:"External DNS"})," project to monitor for services with DNS annotation to automatically create DNS records in an Azure Private Zone. The system user authorized to update the private zone will be an Azure Managed Identity, using AKS Workload Identity support."]}),"\n",(0,a.jsx)(n.h3,{id:"set-environment-variables",children:"Set Environment Variables"}),"\n",(0,a.jsx)(n.p,{children:"Update the following with your own prefered values."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'RG=EphExternalDNSDemo\nLOC=eastus\nAZURE_DNS_ZONE="griffdemo123.com" # DNS zone name like example.com or sub.example.com\nCLUSTER_NAME=externaldns\nTENANT_ID=$(az account show --query tenantId -o tsv)\nSUB_ID=$(az account show --query id -o tsv)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"create-the-resource-group-and-vnet",children:"Create the Resource Group and Vnet"}),"\n",(0,a.jsx)(n.p,{children:"Now to create the resource group and Vnet which we will use for both the private zone and the AKS cluster. You can obviously substitute your own existing Vnet, but don't miss the next step where the private zone get's linked to the vnet."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Create the Resource Group\naz group create -n $RG -l $LOC\n\n# Create the Vnet\naz network vnet create \\\n--name testvnet \\\n--resource-group $RG \\\n--address-prefix 10.2.0.0/16 \\\n--subnet-name aks \\\n--subnet-prefixes 10.2.0.0/24\n\n# Get the subnet id for later use\nSUBNET_ID=$(az network vnet subnet show -g $RG --vnet-name testvnet -n aks -o tsv --query id)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"create-the-private-dns-zone",children:"Create the Private DNS Zone"}),"\n",(0,a.jsx)(n.p,{children:"Now to create the private zone and link it to the vnet."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Create the DNS Zone\naz network private-dns zone create \\\n--resource-group $RG \\\n--name $AZURE_DNS_ZONE\n\n# Link the private zone to the vnet\naz network private-dns link vnet create \\\n-g $RG \\\n-n zonelink \\\n-z $AZURE_DNS_ZONE \\\n-v testvnet \\\n--registration-enabled false\n"})}),"\n",(0,a.jsx)(n.h3,{id:"create-the-aks-cluster",children:"Create the AKS Cluster"}),"\n",(0,a.jsx)(n.p,{children:"We'll create the AKS cluster in the above created subnet, and enable the flags for Workload Identity Support (i.e. OIDC Issuer and Workload Identity)."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Create the AKS Cluster\naz aks create \\\n-g $RG \\\n-n $CLUSTER_NAME \\\n--vnet-subnet-id $SUBNET_ID \\\n--enable-oidc-issuer \\\n--enable-workload-identity \\\n--enable-managed-identity\n\n# Get the cluster credentials\naz aks get-credentials \\\n-g $RG \\\n-n $CLUSTER_NAME \n"})}),"\n",(0,a.jsx)(n.h3,{id:"setup-with-workload-identity",children:"Setup with Workload Identity"}),"\n",(0,a.jsx)(n.p,{children:"Azure Workload Identity for Kubernetes enables the finest grained control of the user that will be managing the DNS records, because we can isolate the rights specific to those needed to control the private zone. In the following steps, we'll get the OIDC issuer URL, create the managed identity, and create the Azure AD Federation for the service account used by external DNS."}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"NOTE:"})," In our setup we will assume external DNS resides in the 'default' namespace. If you move external DNS to it's own namespace, you'll need to make sure the 'az identity federated-credential create' command below references the right namespace in the fully qualified service account name in the '--subject' field."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Get the OIDC Issuer URL\nexport AKS_OIDC_ISSUER="$(az aks show -n $CLUSTER_NAME -g $RG --query "oidcIssuerProfile.issuerUrl" -otsv)"\n\n# Create the managed identity\naz identity create --name external-dns-identity --resource-group $RG --location $LOC\n\n# Get identity client ID\nexport USER_ASSIGNED_CLIENT_ID=$(az identity show --resource-group $RG --name external-dns-identity --query \'clientId\' -o tsv)\n\n# Get the resource group ID\nRG_ID=$(az group show -n $RG -o tsv --query id)\n\n# Get the DNS Zone ID\nDNS_ID=$(az network private-dns zone show --name $AZURE_DNS_ZONE \\\n --resource-group $RG --query "id" --output tsv)\n\n# Give the kubelet identity DNS Contributor rights\naz role assignment create \\\n--assignee $USER_ASSIGNED_CLIENT_ID \\\n--role "Private DNS Zone Contributor" \\\n--scope "$DNS_ID"\n\naz role assignment create \\\n--role "Reader" \\\n--assignee $USER_ASSIGNED_CLIENT_ID \\\n--scope $RG_ID\n\n# Federate the identity\naz identity federated-credential create \\\n--name external-dns-identity \\\n--identity-name external-dns-identity \\\n--resource-group $RG \\\n--issuer ${AKS_OIDC_ISSUER} \\\n--subject system:serviceaccount:default:external-dns\n\n'})}),"\n",(0,a.jsx)(n.h3,{id:"install-external-dns",children:"Install External DNS"}),"\n",(0,a.jsx)(n.p,{children:"We'll install External DNS using it's helm chart, setting the values to ensure we're using the Azure Private DNS provider and pass in the managed identity details."}),"\n",(0,a.jsx)(n.p,{children:"First, lets create the values file."}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"NOTE:"})," We default to the 'debug' log level for testing, but you can remove that line to minimize logging once you're up and running. The default value for logLevel is 'info'."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'cat <<EOF > values.yaml\nfullnameOverride: external-dns\n\nserviceAccount:\n  annotations:\n    azure.workload.identity/client-id: ${USER_ASSIGNED_CLIENT_ID}\n\npodLabels:\n  azure.workload.identity/use: "true"\n\nprovider: azure-private-dns\n\nazure:\n  resourceGroup: "${RG}"\n  tenantId: "${TENANT_ID}"\n  subscriptionId: "${SUB_ID}"\n  useWorkloadIdentityExtension: true\n\nlogLevel: debug\n\nEOF\n'})}),"\n",(0,a.jsx)(n.p,{children:"Run the helm install."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Add the helm repo\nhelm repo add bitnami https://charts.bitnami.com/bitnami\n\n# Update the helm repo in case you already have it\nhelm repo update bitnami\n\n# Install external dns\nhelm install external-dns bitnami/external-dns -f values.yaml\n\n"})}),"\n",(0,a.jsx)(n.h3,{id:"test-external-dns",children:"Test External DNS"}),"\n",(0,a.jsx)(n.p,{children:"Finally, lets make sure everything is working. We'll create a deployment and a service with both a private load balancer annotation and the annotation used by External DNS to trigger record creation."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Test ExternalDNS\ncat << EOF | kubectl apply -f -\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      annotations:\n        external-dns.alpha.kubernetes.io/hostname: pod.griffdemo123.com\n      labels:\n        app: nginx\n    spec:\n      hostNetwork: true\n      containers:\n      - image: nginx\n        name: nginx\n        ports:\n        - containerPort: 80\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-svc\n  annotations:\n    service.beta.kubernetes.io/azure-load-balancer-internal: "true"\n    external-dns.alpha.kubernetes.io/hostname: hello.griffdemo123.com\n    external-dns.alpha.kubernetes.io/internal-hostname: hello-clusterip.griffdemo123.com\nspec:\n  ports:\n  - port: 80\n    protocol: TCP\n    targetPort: 80\n  selector:\n    app: nginx\n  type: LoadBalancer\nEOF\n'})}),"\n",(0,a.jsx)(n.p,{children:"You can check the logs for external DNS as follows:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# To dump the current pod logs\nkubectl logs -l app.kubernetes.io/instance=external-dns\n\n# To follow the pod logs\nkubectl logs -f -l app.kubernetes.io/instance=external-dns\n"})}),"\n",(0,a.jsx)(n.p,{children:"Show the records created."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"az network private-dns record-set a list -g $RG -z $AZURE_DNS_ZONE -o yaml\n\n# SAMPLE OUTPUT\n- aRecords:\n  - ipv4Address: 10.2.0.7\n  etag: 1f85f096-4036-408f-aa54-2d58d0523a96\n  fqdn: hello.griffdemo123.com.\n  id: /subscriptions/XXXXXX-XXXX/resourceGroups/ephexternaldnsdemo/providers/Microsoft.Network/privateDnsZones/griffdemo123.com/A/hello\n  isAutoRegistered: false\n  name: hello\n  resourceGroup: ephexternaldnsdemo\n  ttl: 300\n  type: Microsoft.Network/privateDnsZones/A\n- aRecords:\n  - ipv4Address: 10.0.11.167\n  etag: bf268fab-6678-4ae4-ae50-0cf49b314a0c\n  fqdn: hello-clusterip.griffdemo123.com.\n  id: /subscriptions/XXXXXX-XXXX/resourceGroups/ephexternaldnsdemo/providers/Microsoft.Network/privateDnsZones/griffdemo123.com/A/hello-clusterip\n  isAutoRegistered: false\n  name: hello-clusterip\n  resourceGroup: ephexternaldnsdemo\n  ttl: 300\n  type: Microsoft.Network/privateDnsZones/A\n"})}),"\n",(0,a.jsx)(n.h3,{id:"create-a-record-for-a-pod-ip",children:"Create a Record for a Pod IP"}),"\n",(0,a.jsxs)(n.p,{children:["If you need to create a DNS record for a pod IP, you can do this by creating a headless service that is annotated for external-dns. External DNS will see the service and then go and retrieve the pod IP, as documented in this PR:\n",(0,a.jsx)(n.a,{href:"https://github.com/kubernetes-sigs/external-dns/pull/498",children:"for headless services use podip instead of hostip #498"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Test ExternalDNS\ncat << EOF | kubectl apply -f -\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - image: nginx\n        name: nginx\n        ports:\n        - containerPort: 80\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-svc\n  annotations:\n    external-dns.alpha.kubernetes.io/hostname: pod.griffdemo123.com\nspec:\n  ports:\n  - port: 80\n    protocol: TCP\n    targetPort: 80\n  selector:\n    app: nginx\n  clusterIP: None\nEOF\n"})}),"\n",(0,a.jsx)(n.p,{children:"Check the record was created via CLI, or you can use the portal"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Get the pod IP from kubernetes\nkubectl get pod -l app=nginx -o jsonpath='{.items[0].status.podIP}'\n\n# Sample Output\n10.244.2.14\n\n# Get the IP from the Azure Private Zone\naz network private-dns record-set a list -g $RG -z $AZURE_DNS_ZONE -o yaml --query \"[?fqdn == 'pod.$AZURE_DNS_ZONE.'].aRecords\"\n\n# Sample Output\n- - ipv4Address: 10.244.2.14\n"})}),"\n",(0,a.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,a.jsx)(n.p,{children:"In the above example we set up and AKS cluster, enabled with Azure Workload Identity and installed external-dns to automatically managed private DNS records in and Azure Private Zone. We demonstrated this for both Services and Pods. There are other options for managing the rights of the external-dns user, but I believe that Workload Identity gives you the best overall granularity of control."})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);