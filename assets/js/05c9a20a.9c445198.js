"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[5626],{132:e=>{e.exports=JSON.parse('{"permalink":"/2024/09/06/multi-cluster-layer-4-load-balancing-with-fleet-manager","editUrl":"https://github.com/appdevgbb/gbb-blog/tree/main/docusaurus/blog/2024-09-06/multi-cluster-layer-4-load-balancing-with-fleet-manager/index.md","source":"@site/blog/2024-09-06/multi-cluster-layer-4-load-balancing-with-fleet-manager/index.md","title":"Multi-Cluster Layer 4 Load Balancing with Fleet Manager","description":"How to configure a multi-cluster layer 4 load balancer across multiple AKS clusters using Fleet Manager.","date":"2024-09-06T00:00:00.000Z","tags":[],"readingTime":9.34,"hasTruncateMarker":true,"authors":[{"name":"Diego Casati","title":"Principal Cloud Architect, Azure Global Black Belt","url":"https://github.com/dcasati","socials":{"x":"https://x.com/ve6dpc","github":"https://github.com/dcasati"},"imageURL":"https://github.com/dcasati.png","key":"diego_casati","page":null}],"frontMatter":{"authors":["diego_casati"],"date":"2024-09-06","description":"How to configure a multi-cluster layer 4 load balancer across multiple AKS clusters using Fleet Manager.","tags":[],"title":"Multi-Cluster Layer 4 Load Balancing with Fleet Manager"},"unlisted":false,"prevItem":{"title":"End to End TLS Encryption with AKS and AFD","permalink":"/2024/11/05/afd-aks-ingress-tls"},"nextItem":{"title":"Using Stream Analytics to Filter AKS Control Plane Logs","permalink":"/2024/08/15/aks-control-plane-log-filtering"}}')},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var s=t(6540);const r={},a=s.createContext(r);function l(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(a.Provider,{value:n},e.children)}},9823:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var s=t(132),r=t(4848),a=t(8453);const l={authors:["diego_casati"],date:"2024-09-06",description:"How to configure a multi-cluster layer 4 load balancer across multiple AKS clusters using Fleet Manager.",tags:[],title:"Multi-Cluster Layer 4 Load Balancing with Fleet Manager"},o="Multi-Cluster Layer 4 Load Balancing with Fleet Manager",i={authorsImageUrls:[void 0]},c=[{value:"Topology",id:"topology",level:3},{value:"Create two AKS clusters",id:"create-two-aks-clusters",level:3},{value:"Create the cluster in East US",id:"create-the-cluster-in-east-us",level:4},{value:"Create the VNets and peer them",id:"create-the-vnets-and-peer-them",level:4},{value:"Create a Fleet Manager and add members to it",id:"create-a-fleet-manager-and-add-members-to-it",level:4},{value:"Deploy the AKS store application",id:"deploy-the-aks-store-application",level:4},{value:"Testing the Application",id:"testing-the-application",level:4},{value:"Remove the setup",id:"remove-the-setup",level:4},{value:"Conclusion",id:"conclusion",level:3}];function d(e){const n={a:"a",code:"code",h3:"h3",h4:"h4",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"This guide demonstrates how to set up layer 4 load balancing across multiple AKS clusters using\nAzure Fleet Manager. We\u2019ll create two AKS clusters in different regions (East US and West US),\nconfigure Virtual Network (VNet) peering between them, and deploy a demo application using\nFleet Manager. The process covers AKS cluster setup, VNet peering, Fleet Manager configuration,\nand application deployment across regions."}),"\n",(0,r.jsx)(n.h3,{id:"topology",children:"Topology"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"+-----------------------+          +-----------------------+\n|    AKS Cluster (East) |          |    AKS Cluster (West) |\n|  Region: East US      |          |  Region: West US      |\n|                       |          |                       |\n| +-------------------+ |          | +-------------------+ |\n| |   Application     | |          | |   Application     | |\n| +-------------------+ |          | +-------------------+ |\n|                       |          |                       |\n+-----------------------+          +-----------------------+\n          |                                      |\n          +--------------------------------------+\n                        VNet Peering\n\n             +-----------------------------------+\n             |    Fleet Manager (Hub Region)     |\n             +-----------------------------------+\n"})}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","AKS Cluster (East): A Kubernetes cluster deployed in the East US region."]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","AKS Cluster (West): A Kubernetes cluster deployed in the West US region."]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","VNet Peering: Virtual Network peering between the AKS clusters to enable communication."]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","Fleet Manager: Azure Fleet Manager deployed in the hub region, managing the application across both AKS clusters."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"create-two-aks-clusters",children:"Create two AKS clusters"}),"\n",(0,r.jsx)(n.p,{children:"For this demo, we will create two AKS clusters in two regions: East and West."}),"\n",(0,r.jsx)(n.h4,{id:"create-the-cluster-in-east-us",children:"Create the cluster in East US"}),"\n",(0,r.jsx)(n.p,{children:"The first step is to setup all of the environment variables that we will use"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# ======================\n# Environment Variables\n# ======================\nexport LOCATION_EAST="eastus2"\nexport LOCATION_WEST="westus2"\nexport RESOURCE_GROUP_EAST="rg-aks-$LOCATION_EAST"\nexport RESOURCE_GROUP_WEST="rg-aks-$LOCATION_WEST"\nexport CLUSTER_EAST="aks-$LOCATION_EAST"\nexport CLUSTER_WEST="aks-$LOCATION_WEST"\nexport FLEET_RESOURCE_GROUP_NAME="rg-fleet"\nexport FLEET="gbb-fleet"\nexport FLEET_LOCATION="westus"\n\n# VNET\nexport VNET_EAST="aks-vnet-east"\nexport VNET_WEST="aks-vnet-west"\nexport VNET_EAST_PREFIX="10.1.0.0/16"\nexport VNET_WEST_PREFIX="10.2.0.0/16"\n\n# Non-overlapping CIDR ranges\nexport CIDR_EAST="10.1.0.0/24"\nexport CIDR_WEST="10.2.0.0/24"\n\n# Subnet names\nexport SUBNET_EAST="aks-subnet-east"\nexport SUBNET_WEST="aks-subnet-west"\n'})}),"\n",(0,r.jsx)(n.p,{children:"We can now proceed with the creation of the first cluster"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Create a resource group for the cluster in East US\naz group create \\\n  --name ${RESOURCE_GROUP_EAST} \\\n  --location ${LOCATION_EAST}\n\n# Create a vNet for the West US cluster\naz network vnet create \\\n  --resource-group ${RESOURCE_GROUP_EAST} \\\n  --name ${VNET_EAST} \\\n  --address-prefix ${VNET_EAST_PREFIX} \\\n  --subnet-name ${SUBNET_EAST} \\\n  --subnet-prefix ${CIDR_EAST}\n\n# Retrieve the subnet id\nSUBNET_ID_EAST=$(az network vnet subnet show \\\n  --resource-group ${RESOURCE_GROUP_EAST} \\\n  --vnet-name ${VNET_EAST} \\\n  --name ${SUBNET_EAST} \\\n  --query "id" -o tsv)\n\n# Create an AKS cluster with Azure CNI\naz aks create \\\n  --resource-group ${RESOURCE_GROUP_EAST} \\\n  --name ${CLUSTER_EAST} \\\n  --network-plugin azure \\\n  --vnet-subnet-id ${SUBNET_ID_EAST}\n\n# get the cluster credentials (East US)\naz aks get-credentials \\\n  --resource-group ${RESOURCE_GROUP_EAST} \\\n  --name ${CLUSTER_EAST} \\\n  --file ${CLUSTER_EAST}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Now repeat the same process for the cluster in West US:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Create a resource group for the cluster in West US\naz group create \\\n  --name ${RESOURCE_GROUP_WEST} \\\n  --location ${LOCATION_WEST}\n\n# Create a vNet for the West US cluster\naz network vnet create \\\n  --resource-group ${RESOURCE_GROUP_WEST} \\\n  --name ${VNET_WEST} \\\n  --address-prefix ${VNET_WEST_PREFIX} \\\n  --subnet-name ${SUBNET_WEST} \\\n  --subnet-prefix ${CIDR_WEST}\n\n# Retrieve the subnet id\nSUBNET_ID_WEST=$(az network vnet subnet show \\\n  --resource-group ${RESOURCE_GROUP_WEST} \\\n  --vnet-name ${VNET_WEST} \\\n  --name ${SUBNET_WEST} \\\n  --query "id" -o tsv)\n\n# Create an AKS cluster with Azure CNI\naz aks create \\\n  --resource-group ${RESOURCE_GROUP_WEST} \\\n  --name ${CLUSTER_WEST} \\\n  --network-plugin azure \\\n  --vnet-subnet-id ${SUBNET_ID_WEST}\n\n# get the cluster credentials (West US)\naz aks get-credentials \\\n  --resource-group ${RESOURCE_GROUP_WEST} \\\n  --name ${CLUSTER_WEST} \\\n  --file ${CLUSTER_WEST}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"create-the-vnets-and-peer-them",children:"Create the VNets and peer them"}),"\n",(0,r.jsx)(n.p,{children:"Peer the VNets between East and West US:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Peer VNets between East and West\nVNET_ID_EAST=$(az network vnet show --resource-group ${RESOURCE_GROUP_EAST} --name ${VNET_EAST} --query "id" -o tsv)\nVNET_ID_WEST=$(az network vnet show --resource-group ${RESOURCE_GROUP_WEST} --name ${VNET_WEST} --query "id" -o tsv)\n\n# Create VNet peering from east to west\naz network vnet peering create --name EastToWestPeering \\\n    --resource-group ${RESOURCE_GROUP_EAST} \\\n    --vnet-name ${VNET_EAST} \\\n    --remote-vnet ${VNET_ID_WEST} \\\n    --allow-vnet-access\n\n# Create VNet peering from west to east\naz network vnet peering create --name WestToEastPeering \\\n    --resource-group ${RESOURCE_GROUP_WEST} \\\n    --vnet-name ${VNET_WEST} \\\n    --remote-vnet ${VNET_ID_EAST} \\\n    --allow-vnet-access\n'})}),"\n",(0,r.jsx)(n.h4,{id:"create-a-fleet-manager-and-add-members-to-it",children:"Create a Fleet Manager and add members to it"}),"\n",(0,r.jsx)(n.p,{children:"Add the fleet extension to Azure CLI"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"az extension add --name fleet\n"})}),"\n",(0,r.jsx)(n.p,{children:"Create the Fleet Manager resource"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# create the resource group\naz group create \\\n  --name ${FLEET_RESOURCE_GROUP_NAME} \\\n  --location ${FLEET_LOCATION}\n\n# create fleet resource\naz fleet create \\\n  --resource-group ${FLEET_RESOURCE_GROUP_NAME} \\\n  --name ${FLEET} \\\n  --location ${FLEET_LOCATION} \\\n  --enable-hub\n\n# Fleet Manager credentials\naz fleet get-credentials \\\n  --resource-group ${FLEET_RESOURCE_GROUP_NAME} \\\n  --name ${FLEET} \\\n  --file ${FLEET}\n\nFLEET_ID=$(az fleet show --resource-group "$FLEET_RESOURCE_GROUP_NAME" --name "$FLEET" -o tsv --query=id)\n\nIDENTITY=$(az ad signed-in-user show --query "id" --output tsv)\nROLE="Azure Kubernetes Fleet Manager RBAC Cluster Admin"\naz role assignment create \\\n  --role "$ROLE" \\\n  --assignee "$IDENTITY" \\\n  --scope ${FLEET_ID}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Retrieve the Cluster IDs for East and West clusters:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Retrieve Cluster IDs (East and West)\nexport AKS_EAST_ID=$(az aks show --resource-group ${RESOURCE_GROUP_EAST} --name ${CLUSTER_EAST} --query "id" -o tsv)\n\nexport AKS_WEST_ID=$(az aks show --resource-group ${RESOURCE_GROUP_WEST} --name ${CLUSTER_WEST} --query "id" -o tsv)\n\necho "AKS EAST cluster id: ${AKS_EAST_ID}"\necho "AKS WEST cluster id: ${AKS_WEST_ID}"\n'})}),"\n",(0,r.jsx)(n.p,{children:"Now join both clusters to the Fleet:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# join the East US cluster\naz fleet member create \\\n  --resource-group ${FLEET_RESOURCE_GROUP_NAME} \\\n  --fleet-name ${FLEET} \\\n  --name ${CLUSTER_EAST} \\\n  --member-cluster-id ${AKS_EAST_ID}\n\n# join the West US cluster\naz fleet member create \\\n  --resource-group ${FLEET_RESOURCE_GROUP_NAME} \\\n  --fleet-name ${FLEET} \\\n  --name ${CLUSTER_WEST} \\\n  --member-cluster-id ${AKS_WEST_ID}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Check if everything was setup correctly"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"KUBECONFIG=gbb-fleet kubectl get memberclusters\n"})}),"\n",(0,r.jsx)(n.p,{children:"You should see an output similar to this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"NAME          JOINED   AGE     MEMBER-AGENT-LAST-SEEN   NODE-COUNT   AVAILABLE-CPU   AVAILABLE-MEMORY\naks-eastus2   True     11m     5s                       3            4196m           17827580Ki\naks-westus2   True     9m24s   11s                      3            4196m           17827580Ki\n"})}),"\n",(0,r.jsx)(n.h4,{id:"deploy-the-aks-store-application",children:"Deploy the AKS store application"}),"\n",(0,r.jsx)(n.p,{children:"For this next step, we will deploy the AKS Store demo application to both clusters,\nEast and West, using Fleet. Fleet Manager will work as a centralized hub, sending the\nconfiguration and deployment files to its member clusters."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# create the namespace for the application\nKUBECONFIG=${FLEET} kubectl create ns aks-store-demo\n\n# deploy the application on both clusters thru Fleet\nKUBECONFIG=${FLEET} kubectl apply -n aks-store-demo -f  https://raw.githubusercontent.com/Azure-Samples/aks-store-demo/main/aks-store-ingress-quickstart.yaml\n"})}),"\n",(0,r.jsx)(n.p,{children:"Let's pause for a moment and see what we have done. At this stage, we have done the following:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Two AKS cluster, one in East US and another in West US."}),"\n",(0,r.jsx)(n.li,{children:"We have connected the vNets of these two clusters using vNet Peering."}),"\n",(0,r.jsx)(n.li,{children:"A hub AKS Fleet Manager was deployed and the two clusters were added as its members."}),"\n",(0,r.jsx)(n.li,{children:"The AKS Store Demo application was deployed on both clusters (East US and West US) through Fleet."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Our next step now is to leverage three components from AKS Fleet Manager: Service Export, Multi Cluster Service and Cluster Resource Placement."}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Feature"}),(0,r.jsx)(n.th,{children:"Purpose"}),(0,r.jsx)(n.th,{children:"Use Case"}),(0,r.jsx)(n.th,{children:"How It Works"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"ServiceExport"})}),(0,r.jsx)(n.td,{children:"Exports a service from a member cluster to other clusters as a Fleet resource. This can then be used for cross-cluster service load balancing."}),(0,r.jsx)(n.td,{children:"Exposing a backend service from Cluster A to Cluster B within the AKS Fleet."}),(0,r.jsxs)(n.td,{children:['A Kubernetes service is marked as "exported" so it can be discovered and imported by other clusters. e.g.: exporting the ',(0,r.jsx)(n.code,{children:"store-front"})," service from the ",(0,r.jsx)(n.code,{children:"aks-store-demo"})," namespace"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"ClusterResourcePlacement"})}),(0,r.jsx)(n.td,{children:"Allows the deployment of Kubernetes resources across fleet members."}),(0,r.jsx)(n.td,{children:"Automatically deploying an application, config maps, or secrets to all clusters in a region."}),(0,r.jsxs)(n.td,{children:["Selects target member clusters based on labels and ensures the specified resources are synchronized across them. e.g.: match on ",(0,r.jsx)(n.code,{children:"fleet.azure.com/location"})," being ",(0,r.jsx)(n.code,{children:"eastus2"})," or ",(0,r.jsx)(n.code,{children:"westus2"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"MultiClusterService"})}),(0,r.jsx)(n.td,{children:"A resource that allows the user to setup a Layer 4 multi-cluster load balancing solution across the fleet."}),(0,r.jsx)(n.td,{children:"Load balancing requests to a frontend service running in multiple AKS clusters."}),(0,r.jsxs)(n.td,{children:["Automatically detects exported services and provides a unified endpoint that distributes traffic across clusters. e.g.: expose the ",(0,r.jsx)(n.code,{children:"store-front"})," service"]})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"Create the Service Export:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cat <<EOF > aks-store-serviceexport.yaml\napiVersion: networking.fleet.azure.com/v1alpha1\nkind: ServiceExport\nmetadata:\n  name: store-front\n  namespace: aks-store-demo\nEOF\n\nKUBECONFIG=${FLEET} kubectl apply -n aks-store-demo -f aks-store-serviceexport.yaml\n"})}),"\n",(0,r.jsx)(n.p,{children:"Verify that the service export was deployed:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"KUBECONFIG=${FLEET} kubectl -n aks-store-demo get serviceexport\n"})}),"\n",(0,r.jsx)(n.p,{children:"You should see an output similar to this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"NAME          IS-VALID   IS-CONFLICTED   AGE\nstore-front                              2m4s\n"})}),"\n",(0,r.jsx)(n.p,{children:"Create the ClusterResourcePlacement (CRP):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'cat <<EOF > cluster-resource-placement.yaml\napiVersion: placement.kubernetes-fleet.io/v1beta1\nkind: ClusterResourcePlacement\nmetadata:\n  name: aks-store-demo\nspec:\n  resourceSelectors:\n    - group: ""\n      version: v1\n      kind: Namespace\n      name: aks-store-demo\n  policy:\n    affinity:\n      clusterAffinity:\n        requiredDuringSchedulingIgnoredDuringExecution:\n          clusterSelectorTerms:\n            - labelSelector:\n                matchExpressions:\n                  - key: fleet.azure.com/location\n                    operator: In\n                    values:\n                      - ${LOCATION_EAST}\n                      - ${LOCATION_WEST}\nEOF\n\nKUBECONFIG=${FLEET} kubectl apply -f cluster-resource-placement.yaml\n'})}),"\n",(0,r.jsx)(n.p,{children:"Verify that the CRP was created:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"KUBECONFIG=${FLEET} kubectl get ClusterResourcePlacement\nNAME             GEN   SCHEDULED   SCHEDULED-GEN   AVAILABLE   AVAILABLE-GEN   AGE\naks-store-demo   2     True        2               True        2               110s\n"})}),"\n",(0,r.jsx)(n.p,{children:"Create and deploy MultiClusterService (MCS):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cat <<EOF > aks-store-mcs.yaml\napiVersion: networking.fleet.azure.com/v1alpha1\nkind: MultiClusterService\nmetadata:\n  name: store-front\n  namespace: aks-store-demo\nspec:\n  serviceImport:\n    name: store-front\nEOF\n\n# Deploy the MultiClusterService resource to the East US cluster\nKUBECONFIG=${CLUSTER_EAST} kubectl apply -f aks-store-mcs.yaml\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Verify that the MCS was deployed and that the ",(0,r.jsx)(n.code,{children:"IS_VALID"})," field is showing ",(0,r.jsx)(n.code,{children:"True"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"KUBECONFIG=${CLUSTER_EAST} kubectl -n aks-store-demo get mcs\nNAME          SERVICE-IMPORT   EXTERNAL-IP    IS-VALID   AGE\nstore-front   store-front      20.7.120.195   True       55s\n"})}),"\n",(0,r.jsx)(n.h4,{id:"testing-the-application",children:"Testing the Application"}),"\n",(0,r.jsx)(n.p,{children:"Once the MultiClusterService (MCS) has been successfully deployed across the AKS clusters, you can test the application to ensure it's working properly. Follow these steps to verify the setup:"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Get the external IP address of the service"}),":"]}),"\n",(0,r.jsx)(n.p,{children:"After deploying the MultiClusterService, you need to retrieve the external IP address to access the service. Run the following command to get the external IP for the East-US cluster:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"KUBECONFIG=${CLUSTER_EAST} kubectl get services -n fleet-system\n"})}),"\n",(0,r.jsx)(n.p,{children:"Look for the external IP under the EXTERNAL-IP column for the store-front service."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Access the application"}),":"]}),"\n",(0,r.jsx)(n.p,{children:"Once you have the external IP addresses from both clusters, open a browser or use curl to access the application using the IP addresses:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"curl http://<EXTERNAL_IP>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Replace ",(0,r.jsx)(n.code,{children:"<EXTERNAL_IP>"})," with the actual external IP you retrieved from the previous step. The application should be accessible through either of the IPs."]}),"\n",(0,r.jsx)(n.p,{children:"Validate cross-region load balancing:"}),"\n",(0,r.jsxs)(n.p,{children:["Since the ",(0,r.jsx)(n.code,{children:"MultiClusterService"})," has been deployed across multiple regions, traffic can be balanced between the AKS clusters. You can simulate\ntraffic from different regions using tools like curl, Postman, or load-testing utilities to confirm that the service is responding from both regions."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Verify service status"}),":"]}),"\n",(0,r.jsx)(n.p,{children:"You can check the status of the deployed services and pods on both clusters to ensure everything is running correctly:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"KUBECONFIG=${CLUSTER_EAST} kubectl get pods -n aks-store-demo\nKUBECONFIG=${CLUSTER_WEST} kubectl get pods -n aks-store-demo\n"})}),"\n",(0,r.jsx)(n.p,{children:"Ensure that all services and pods show a Running status, indicating that the application is running across both clusters."}),"\n",(0,r.jsx)(n.h4,{id:"remove-the-setup",children:"Remove the setup"}),"\n",(0,r.jsx)(n.p,{children:"To remove this setup, you can run the following set of commands:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# East cluster\naz group delete --name ${RESOURCE_GROUP_EAST} --yes --no-wait\n\n# West cluster\naz group delete --name ${RESOURCE_GROUP_WEST} --yes --no-wait\n\n# Fleet Hub\naz group delete --name ${FLEET_RESOURCE_GROUP_NAME} --yes --no-wait\n"})}),"\n",(0,r.jsx)(n.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"In this guide, we successfully set up a multi-cluster layer 4 load balancer across\nAKS clusters using Azure Fleet Manager. By configuring AKS clusters in different regions,\nestablishing VNet peering, and utilizing Fleet Manager, we enabled centralized management\nand deployment of services across clusters. This approach ensures improved availability and\nscalability for applications deployed across multiple regions."}),"\n",(0,r.jsxs)(n.p,{children:["For the full deployment script used in this tutorial, you can access\nthe App Innovation GBB GitHub repository: ",(0,r.jsx)(n.a,{href:"https://github.com/appdevgbb/pattern-fleet-manager/tree/main",children:"Pattern - Multi-Cluster Layer 4 Load Balancer with Azure Fleet Manager"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);