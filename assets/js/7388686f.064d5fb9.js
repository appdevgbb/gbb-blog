"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[8971],{5851:e=>{e.exports=JSON.parse('{"permalink":"/2021/09/21/workload-identity-azuresql-example","editUrl":"https://github.com/appdevgbb/gbb-blog/tree/main/docusaurus/blog/2021-09-21/workload-identity-azuresql-example/index.md","source":"@site/blog/2021-09-21/workload-identity-azuresql-example/index.md","title":"Accessing Azure SQL DB via Workload Identity and Managed Identity","description":"How to create an AKS cluster enabled with Workload Identity to access Azure SQL DB with Azure Managed Identity from a Kubernetes pod","date":"2021-09-21T00:00:00.000Z","tags":[],"readingTime":5.14,"hasTruncateMarker":true,"authors":[{"name":"Steve Griffith","title":"Principal Cloud Architect, Azure Global Black Belt","url":"https://github.com/swgriffith","socials":{"x":"https://x.com/SteveGriffith","github":"https://github.com/swgriffith"},"imageURL":"https://github.com/swgriffith.png","key":"steve_griffith","page":null}],"frontMatter":{"authors":["steve_griffith"],"date":"2021-09-21","description":"How to create an AKS cluster enabled with Workload Identity to access Azure SQL DB with Azure Managed Identity from a Kubernetes pod","tags":[],"title":"Accessing Azure SQL DB via Workload Identity and Managed Identity"},"unlisted":false,"prevItem":{"title":"Workload Identity","permalink":"/2023/09/21/workload-identity-example"},"nextItem":{"title":"Using Workload Identity with Self Managed Clusters","permalink":"/2021/09/21/workload-identity-self-managed-setup"}}')},7206:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var a=t(5851),r=t(4848),s=t(8453);const i={authors:["steve_griffith"],date:"2021-09-21",description:"How to create an AKS cluster enabled with Workload Identity to access Azure SQL DB with Azure Managed Identity from a Kubernetes pod",tags:[],title:"Accessing Azure SQL DB via Workload Identity and Managed Identity"},o=void 0,d={authorsImageUrls:[void 0]},l=[{value:"Setup",id:"setup",level:2},{value:"Cluster Creation",id:"cluster-creation",level:3},{value:"Set up the identity",id:"set-up-the-identity",level:3},{value:"Create the Azure SQL DB Server and Database",id:"create-the-azure-sql-db-server-and-database",level:3},{value:"Add a user to the database",id:"add-a-user-to-the-database",level:3},{value:"Create the sample app",id:"create-the-sample-app",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,r.jsx)(n.h3,{id:"cluster-creation",children:"Cluster Creation"}),"\n",(0,r.jsx)(n.p,{children:"Lets create the AKS cluster with the OIDC Issure and Workload Identity add-on enabled."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"RG=WorkloadIdentitySQLRG\nLOC=eastus\nCLUSTER_NAME=wisqllab\nUNIQUE_ID=$CLUSTER_NAME$RANDOM\nACR_NAME=$UNIQUE_ID\n\n# Create the resource group\naz group create -g $RG -l $LOC\n\n# Create the cluster with the OIDC Issuer and Workload Identity enabled\naz aks create -g $RG -n $CLUSTER_NAME \\\n--node-count 1 \\\n--enable-oidc-issuer \\\n--enable-workload-identity \\\n--generate-ssh-keys\n\n# Get the cluster credentials\naz aks get-credentials -g $RG -n $CLUSTER_NAME\n"})}),"\n",(0,r.jsx)(n.h3,{id:"set-up-the-identity",children:"Set up the identity"}),"\n",(0,r.jsx)(n.p,{children:"In order to federate a managed identity with a Kubernetes Service Account we need to get the AKS OIDC Issure URL, create the Managed Identity and Service Account and then setup the federation."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Get the OIDC Issuer URL\nexport AKS_OIDC_ISSUER="$(az aks show -n $CLUSTER_NAME -g $RG --query "oidcIssuerProfile.issuerUrl" -otsv)"\n\nMANAGED_IDENTITY_NAME=wi-demo-identity\n\n# Create the managed identity\naz identity create --name $MANAGED_IDENTITY_NAME --resource-group $RG --location $LOC\n\n# Get identity client ID\nexport USER_ASSIGNED_CLIENT_ID=$(az identity show --resource-group $RG --name $MANAGED_IDENTITY_NAME --query \'clientId\' -o tsv)\nexport USER_ASSIGNED_OBJ_ID=$(az identity show --resource-group $RG --name $MANAGED_IDENTITY_NAME --query \'principalId\' -o tsv)\n\n# Create a service account to federate with the managed identity\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  annotations:\n    azure.workload.identity/client-id: ${USER_ASSIGNED_CLIENT_ID}\n  labels:\n    azure.workload.identity/use: "true"\n  name: wi-demo-sa\n  namespace: default\nEOF\n\n# Federate the identity\naz identity federated-credential create \\\n--name wi-demo-federated-id \\\n--identity-name $MANAGED_IDENTITY_NAME \\\n--resource-group $RG \\\n--issuer ${AKS_OIDC_ISSUER} \\\n--subject system:serviceaccount:default:wi-demo-sa\n'})}),"\n",(0,r.jsx)(n.h3,{id:"create-the-azure-sql-db-server-and-database",children:"Create the Azure SQL DB Server and Database"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Create a single database and configure a firewall rule\nUNIQUE_ID=$RANDOM\nSERVER_NAME="widemo-$UNIQUE_ID"\nDATABASE_NAME="widemo$UNIQUE_ID"\nLOGIN="azureuser"\nPASSWD="Pa$$w0rD-$UNIQUE_ID"\n# Specify appropriate IP address values for your environment\n# to limit access to the SQL Database server\nMY_IP=$(curl icanhazip.com)\n\n# Create the SQL Server Instance\naz sql server create \\\n--name $SERVER_NAME \\\n--resource-group $RG \\\n--location $LOC \\\n--admin-user $LOGIN \\\n--admin-password $PASSWD\n\n# Allow your ip through the server firewall\naz sql server firewall-rule create \\\n--resource-group $RG \\\n--server $SERVER_NAME \\\n-n AllowYourIp \\\n--start-ip-address $MY_IP \\\n--end-ip-address $MY_IP\n\n# Allow azure services through the server firewall\naz sql server firewall-rule create \\\n--resource-group $RG \\\n--server $SERVER_NAME \\\n-n AllowAzureServices \\\n--start-ip-address 0.0.0.0 \\\n--end-ip-address 0.0.0.0\n\n# Create the Database \naz sql db create --resource-group $RG --server $SERVER_NAME \\\n--name $DATABASE_NAME \\\n--sample-name AdventureWorksLT \\\n--edition GeneralPurpose \\\n--family Gen5 \\\n--capacity 2 \\\n--zone-redundant false \n\n# Get user info for adding admin user\nSIGNED_IN_USER_OBJ_ID=$(az ad signed-in-user show -o tsv --query id)\nSIGNED_IN_USER_DSP_NAME=$(az ad signed-in-user show -o tsv --query userPrincipalName)\n\n# Add yourself as the Admin User\naz sql server ad-admin create \\\n--resource-group $RG \\\n--server-name $SERVER_NAME \\\n--display-name $SIGNED_IN_USER_DSP_NAME \\\n--object-id $SIGNED_IN_USER_OBJ_ID\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"add-a-user-to-the-database",children:"Add a user to the database"}),"\n",(0,r.jsxs)(n.p,{children:["For this step we'll need to use the ",(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/sql/tools/sqlcmd/sqlcmd-utility?view=sql-server-ver16",children:"sqlcmd command line tool"}),". You can install sqlcmd yourself, or you can use the ",(0,r.jsx)(n.a,{href:"https://shell.azure.com",children:"Azure Cloud Shell"}),", which has it pre-installed for you."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Get the server FQDN\nDB_SERVER_FQDN=$(az sql server show -g $RG -n $SERVER_NAME -o tsv --query fullyQualifiedDomainName)\n\n# Generate the user creation command\n# Copy the output of the following to run against your SQL Server after logged in\necho "CREATE USER [${MANAGED_IDENTITY_NAME}] FROM EXTERNAL PROVIDER WITH OBJECT_ID=\'${USER_ASSIGNED_OBJ_ID}\'"\necho "GO"\necho "ALTER ROLE db_datareader ADD MEMBER [${MANAGED_IDENTITY_NAME}]"\necho "GO"\n\n# Login to the SQL DB via interactive login\nsqlcmd -S $DB_SERVER_FQDN -d $DATABASE_NAME -G\n\n##################################################\n# Paste the command generated above to create the \n# User and grant the user reader access\n# then type exit to leave the sqlcmd terminal\n##################################################\n\n'})}),"\n",(0,r.jsx)(n.h2,{id:"create-the-sample-app",children:"Create the sample app"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Create and test a new console app\ndotnet new console -n sql-console-app\ncd sql-console-app\ndotnet run\n\n# Add the Key Vault and Azure Identity Packages\ndotnet add package Microsoft.Data.SqlClient\n#dotnet add package Azure.Identity\n"})}),"\n",(0,r.jsx)(n.p,{children:"Edit the app Program.cs as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'using Microsoft.Data.SqlClient;\n\nnamespace sqltest\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string? dbServerFQDN = Environment.GetEnvironmentVariable("DB_SERVER_FQDN");\n            string? dbName = Environment.GetEnvironmentVariable("DATABASE_NAME");\n            \n            while(true){\n                try \n                { \n                    // For system-assigned managed identity\n                    // Use your own values for Server and Database.\n                    string ConnectionString = String.Format("Server={0}; Authentication=Active Directory Default; Encrypt=True; Database={1}",dbServerFQDN,dbName);\n\n                    using (SqlConnection connection = new SqlConnection(ConnectionString)) {\n\n                        Console.WriteLine("\\nQuery data example:");\n                        Console.WriteLine("=========================================\\n");\n                        \n                        connection.Open();       \n\n                        String sql = "SELECT TOP 5 FirstName, LastName FROM [SalesLT].[Customer]";\n\n                        using (SqlCommand command = new SqlCommand(sql, connection))\n                        {\n                            using (SqlDataReader reader = command.ExecuteReader())\n                            {\n                                while (reader.Read())\n                                {\n                                    Console.WriteLine("{0} {1}", reader.GetString(0), reader.GetString(1));\n                                }\n                            }\n                        }                    \n                    }\n                }\n                catch (SqlException e)\n                {\n                    Console.WriteLine(e.ToString());\n                }\n            System.Threading.Thread.Sleep(5000);\n            }\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Test the changes"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Build and run the console app\nDB_SERVER_FQDN=$DB_SERVER_FQDN DATABASE_NAME=$DATABASE_NAME dotnet run\n\n##################################################################\n# You should see the console app return sample data at this point\n##################################################################\n"})}),"\n",(0,r.jsx)(n.p,{children:"Create a new Dockerfile with the following."}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"NOTE:"})," Don't forget to check the dotnet version you used to generate your code by running 'dotnet --version' and make sure the base container image matches. For example, my dotnet version was 7.0.102 when I wrote this, so I used sdk 7.0."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'FROM mcr.microsoft.com/dotnet/sdk:7.0 AS build-env\nWORKDIR /App\n\n# Copy everything\nCOPY . ./\n# Restore as distinct layers\nRUN dotnet restore\n# Build and publish a release\nRUN dotnet publish -c Release -o out\n\n# Build runtime image\nFROM mcr.microsoft.com/dotnet/aspnet:7.0\nWORKDIR /App\nCOPY --from=build-env /App/out .\nENTRYPOINT ["dotnet", "sql-console-app.dll"]\n'})}),"\n",(0,r.jsx)(n.p,{children:"Build the image. I'll create an Azure Container Registry and build there, and then link that ACR to my AKS cluster."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Create the ACR\naz acr create -g $RG -n $ACR_NAME --sku Standard\n\n# Link the ACR to the AKS cluster\naz aks update -g $RG -n $CLUSTER_NAME --attach-acr $ACR_NAME --no-wait\n\n# Build the image\naz acr build -t wi-sql-test -r $ACR_NAME .\n"})}),"\n",(0,r.jsx)(n.p,{children:"Now deploy a pod that gets the value using the service account identity."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Pod\nmetadata:\n  name: wi-sql-test\n  namespace: default\n  labels:\n    azure.workload.identity/use: "true"  \nspec:\n  serviceAccountName: wi-demo-sa\n  containers:\n    - image: ${ACR_NAME}.azurecr.io/wi-sql-test\n      name: wi-sql-test\n      env:\n      - name: DB_SERVER_FQDN\n        value: ${DB_SERVER_FQDN}\n      - name: DATABASE_NAME\n        value: ${DATABASE_NAME}\n      imagePullPolicy: Always   \n  nodeSelector:\n    kubernetes.io/os: linux\nEOF\n\n# Check the pod logs\nkubectl logs -f wi-sql-test\n\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(6540);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);