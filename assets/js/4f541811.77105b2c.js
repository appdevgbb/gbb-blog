"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[771],{4500:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var a=n(7680),r=n(4848),i=n(8453);const o={authors:["steve_griffith"],date:"2023-09-21",description:"How to use Azure Workload Identity with the AKS Workload Identity add-on along with MSAL",tags:[],title:"Workload Identity"},s=void 0,l={authorsImageUrls:[void 0]},d=[{value:"Register for the preview",id:"register-for-the-preview",level:3},{value:"Cluster Creation",id:"cluster-creation",level:3},{value:"Set up the identity",id:"set-up-the-identity",level:3},{value:"Create the Key Vault and Secret",id:"create-the-key-vault-and-secret",level:3},{value:"Create the sample app",id:"create-the-sample-app",level:2},{value:"Conclusion",id:"conclusion",level:3}];function c(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["The following walkthrough shows how you can using ",(0,r.jsx)(t.a,{href:"https://azure.github.io/azure-workload-identity/docs/",children:"Azure Workload Identity"})," with the ",(0,r.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/azure/aks/workload-identity-overview",children:"AKS Workload Identity"})," add-on along with ",(0,r.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/azure/active-directory/develop/reference-v2-libraries",children:"MSAL"})]}),"\n",(0,r.jsx)(t.h3,{id:"register-for-the-preview",children:"Register for the preview"}),"\n",(0,r.jsx)(t.p,{children:"The managed add-on for Azure Workload Identity is still in preview, so we must first register for the preview."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'# Add or update the Azure CLI aks preview extention\naz extension add --name aks-preview\naz extension update --name aks-preview\n\n# Register for the preview feature\naz feature register --namespace "Microsoft.ContainerService" --name "EnableWorkloadIdentityPreview"\n\n# Check registration status\naz feature list -o table --query "[?contains(name, \'Microsoft.ContainerService/EnableWorkloadIdentityPreview\')].{Name:name,State:properties.state}"\n\n# Refresh the provider\naz provider register --namespace Microsoft.ContainerService\n'})}),"\n",(0,r.jsx)(t.h3,{id:"cluster-creation",children:"Cluster Creation"}),"\n",(0,r.jsx)(t.p,{children:"Now lets create the AKS cluster with the OIDC Issure and Workload Identity add-on enabled."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"RG=WorkloadIdentityRG\nLOC=eastus\nCLUSTER_NAME=wilab\nUNIQUE_ID=$CLUSTER_NAME$RANDOM\nACR_NAME=$UNIQUE_ID\nKEY_VAULT_NAME=$UNIQUE_ID\n\n# Create the resource group\naz group create -g $RG -l $LOC\n\n# Create the cluster with the OIDC Issuer and Workload Identity enabled\naz aks create -g $RG -n $CLUSTER_NAME \\\n--node-count 1 \\\n--enable-oidc-issuer \\\n--enable-workload-identity \\\n--generate-ssh-keys\n\n# Get the cluster credentials\naz aks get-credentials -g $RG -n $CLUSTER_NAME\n"})}),"\n",(0,r.jsx)(t.h3,{id:"set-up-the-identity",children:"Set up the identity"}),"\n",(0,r.jsx)(t.p,{children:"In order to federate a managed identity with a Kubernetes Service Account we need to get the AKS OIDC Issure URL, create the Managed Identity and Service Account and then create the federation."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'# Get the OIDC Issuer URL\nexport AKS_OIDC_ISSUER="$(az aks show -n $CLUSTER_NAME -g $RG --query "oidcIssuerProfile.issuerUrl" -otsv)"\n\n# Create the managed identity\naz identity create --name wi-demo-identity --resource-group $RG --location $LOC\n\n# Get identity client ID\nexport USER_ASSIGNED_CLIENT_ID=$(az identity show --resource-group $RG --name wi-demo-identity --query \'clientId\' -o tsv)\n\n# Create a service account to federate with the managed identity\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  annotations:\n    azure.workload.identity/client-id: ${USER_ASSIGNED_CLIENT_ID}\n  labels:\n    azure.workload.identity/use: "true"\n  name: wi-demo-sa\n  namespace: default\nEOF\n\n# Federate the identity\naz identity federated-credential create \\\n--name wi-demo-federated-id \\\n--identity-name wi-demo-identity \\\n--resource-group $RG \\\n--issuer ${AKS_OIDC_ISSUER} \\\n--subject system:serviceaccount:default:wi-demo-sa\n'})}),"\n",(0,r.jsx)(t.h3,{id:"create-the-key-vault-and-secret",children:"Create the Key Vault and Secret"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'# Create a key vault\naz keyvault create --name $KEY_VAULT_NAME --resource-group $RG --location $LOC --enable-rbac-authorization false\n\n# Create a secret\naz keyvault secret set --vault-name $KEY_VAULT_NAME --name "Secret" --value "Hello"\n\n# Grant access to the secret for the managed identity\naz keyvault set-policy --name $KEY_VAULT_NAME --secret-permissions get --spn "${USER_ASSIGNED_CLIENT_ID}"\n\n# Get the version ID\naz keyvault secret show --vault-name $KEY_VAULT_NAME --name "Secret" -o tsv --query id\nhttps://wi-demo-keyvault.vault.azure.net/secrets/Secret/ded8e5e3b3e040e9bfa5c47d0e28848a\n\n# The version ID is the last part of the resource id above\n# We\'ll use this later\nVERSION_ID=ded8e5e3b3e040e9bfa5c47d0e28848a\n'})}),"\n",(0,r.jsx)(t.h2,{id:"create-the-sample-app",children:"Create the sample app"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"# Create and test a new console app\ndotnet new console -n keyvault-console-app\ncd keyvault-console-app\ndotnet run\n\n# Add the Key Vault and Azure Identity Packages\ndotnet add package Azure.Security.KeyVault.Secrets\ndotnet add package Azure.Identity\n"})}),"\n",(0,r.jsx)(t.p,{children:"Edit the app as follows:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'using System;\nusing System.IO;\nusing Azure.Core;\nusing Azure.Identity;\nusing Azure.Security.KeyVault.Secrets;\n\nclass Program\n    {\n        static void Main(string[] args)\n        {\n            //Get env variables\n            string? secretName = Environment.GetEnvironmentVariable("SECRET_NAME");;\n            string? keyVaultName = Environment.GetEnvironmentVariable("KEY_VAULT_NAME");;\n            string? versionID = Environment.GetEnvironmentVariable("VERSION_ID");;\n            \n            //Create Key Vault Client\n            var kvUri = String.Format("https://{0}.vault.azure.net", keyVaultName);\n            SecretClientOptions options = new SecretClientOptions()\n            {\n                Retry =\n                {\n                    Delay= TimeSpan.FromSeconds(2),\n                    MaxDelay = TimeSpan.FromSeconds(16),\n                    MaxRetries = 5,\n                    Mode = RetryMode.Exponential\n                 }\n            };\n\n            var client = new SecretClient(new Uri(kvUri), new DefaultAzureCredential(),options);\n\n            // Get the secret value in a loop\n            while(true){\n            Console.WriteLine("Retrieving your secret from " + keyVaultName + ".");\n            KeyVaultSecret secret = client.GetSecret(secretName, versionID);\n            Console.WriteLine("Your secret is \'" + secret.Value + "\'.");\n            System.Threading.Thread.Sleep(5000);\n            }\n\n        }\n    }\n'})}),"\n",(0,r.jsx)(t.p,{children:"Create a new Dockerfile with the following:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build-env\nWORKDIR /App\n\n# Copy everything\nCOPY . ./\n# Restore as distinct layers\nRUN dotnet restore\n# Build and publish a release\nRUN dotnet publish -c Release -o out\n\n# Build runtime image\nFROM mcr.microsoft.com/dotnet/aspnet:6.0\nWORKDIR /App\nCOPY --from=build-env /App/out .\nENTRYPOINT ["dotnet", "keyvault-console-app.dll"]\n'})}),"\n",(0,r.jsx)(t.p,{children:"Build the image. I'll create an Azure Container Registry and build there, and then link that ACR to my AKS cluster."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"# Create the ACR\naz acr create -g $RG -n $ACR_NAME --sku Standard\n\n# Build the image\naz acr build -t wi-kv-test -r $ACR_NAME .\n\n# Link the ACR to the AKS cluster\naz aks update -g $RG -n $CLUSTER_NAME --attach-acr $ACR_NAME\n"})}),"\n",(0,r.jsx)(t.p,{children:"Now deploy a pod that gets the value using the service account identity."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Pod\nmetadata:\n  name: wi-kv-test\n  namespace: default\n  labels:\n    azure.workload.identity/use: \"true\"  \nspec:\n  serviceAccountName: wi-demo-sa\n  containers:\n    - image: ${ACR_NAME}.azurecr.io/wi-kv-test\n      name: wi-kv-test\n      env:\n      - name: KEY_VAULT_NAME\n        value: ${KEY_VAULT_NAME}\n      - name: SECRET_NAME\n        value: Secret\n      - name: VERSION_ID\n        value: ${VERSION_ID}       \n  nodeSelector:\n    kubernetes.io/os: linux\nEOF\n\n# Check the pod logs\nkubectl logs -f wi-kv-test\n\n# Sample Output\nRetrieving your secret from wi-demo-keyvault.\nYour secret is 'Hello'.\n"})}),"\n",(0,r.jsx)(t.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(t.p,{children:"Congrats! You should now have a working pod that uses MSAL along with a Kubernetes Service Account federated to an Azure Managed Identity to access and Azure Key Vault Secret."})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},7680:e=>{e.exports=JSON.parse('{"permalink":"/2023/09/21/workload-identity-example","editUrl":"https://github.com/appdevgbb/gbb-blog/tree/main/docusaurus/blog/2023-09-21/workload-identity-example/index.md","source":"@site/blog/2023-09-21/workload-identity-example/index.md","title":"Workload Identity","description":"How to use Azure Workload Identity with the AKS Workload Identity add-on along with MSAL","date":"2023-09-21T00:00:00.000Z","tags":[],"readingTime":4.29,"hasTruncateMarker":true,"authors":[{"name":"Steve Griffith","title":"Principal Cloud Architect, Azure Global Black Belt","url":"https://github.com/swgriffith","socials":{"x":"https://x.com/SteveGriffith","github":"https://github.com/swgriffith"},"imageURL":"https://github.com/swgriffith.png","key":"steve_griffith","page":null}],"frontMatter":{"authors":["steve_griffith"],"date":"2023-09-21","description":"How to use Azure Workload Identity with the AKS Workload Identity add-on along with MSAL","tags":[],"title":"Workload Identity"},"unlisted":false,"prevItem":{"title":"Using Kubelogin with AKS via Terraform","permalink":"/2023/09/21/kubelogin-terraform"},"nextItem":{"title":"Accessing Azure SQL DB via Workload Identity and Managed Identity","permalink":"/2021/09/21/workload-identity-azuresql-example"}}')},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var a=n(6540);const r={},i=a.createContext(r);function o(e){const t=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);