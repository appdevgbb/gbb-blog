"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[5292],{4869:e=>{e.exports=JSON.parse('{"permalink":"/2023/11/09/part2-aks-image-verification","editUrl":"https://github.com/appdevgbb/gbb-blog/tree/main/docusaurus/blog/2023-11-09/part2-aks-image-verification/index.md","source":"@site/blog/2023-11-09/part2-aks-image-verification/index.md","title":"Image Verification Part 2 - Image Verification with Gatekeeper and Ratify","description":"How to manually setup Gatekeeper and Ratify on an AKS cluster to enable runtime image signature verification.","date":"2023-11-09T00:00:00.000Z","tags":[],"readingTime":4.04,"hasTruncateMarker":true,"authors":[{"name":"Steve Griffith","title":"Principal Cloud Architect, Azure Global Black Belt","url":"https://github.com/swgriffith","socials":{"x":"https://x.com/SteveGriffith","github":"https://github.com/swgriffith"},"imageURL":"https://github.com/swgriffith.png","key":"steve_griffith","page":null}],"frontMatter":{"authors":["steve_griffith"],"date":"2023-11-09","description":"How to manually setup Gatekeeper and Ratify on an AKS cluster to enable runtime image signature verification.","tags":[],"title":"Image Verification Part 2 - Image Verification with Gatekeeper and Ratify"},"unlisted":false,"prevItem":{"title":"Image Verification Part 1 - Notation CLI","permalink":"/2023/11/09/part1-notation-usage"},"nextItem":{"title":"AKS Custom Policy","permalink":"/2023/10/26/aks-custom-policy"}}')},5995:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var a=n(4869),i=n(4848),r=n(8453);const s={authors:["steve_griffith"],date:"2023-11-09",description:"How to manually setup Gatekeeper and Ratify on an AKS cluster to enable runtime image signature verification.",tags:[],title:"Image Verification Part 2 - Image Verification with Gatekeeper and Ratify"},o="Part 2 - Image Verification with Gatekeeper and Ratify",l={authorsImageUrls:[void 0]},c=[{value:"Introduction",id:"introduction",level:2},{value:"Cluster Creation and Setup",id:"cluster-creation-and-setup",level:2},{value:"Managed Identity Setup",id:"managed-identity-setup",level:2},{value:"Install Gatekeeper and Ratify",id:"install-gatekeeper-and-ratify",level:2},{value:"Test the policy!",id:"test-the-policy",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"NOTE:"})," The manifest files used in this post can be found ",(0,i.jsx)(t.a,{href:"https://github.com/swgriffith/azure-guides/tree/master/image-signing",children:"here"})]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["In the prior post, we ran through using the notation cli tool to sign images in Azure Container Registry. If you havent gone through that post, I recommend you start there at ",(0,i.jsx)(t.a,{href:"./part1-notation-usage.html",children:"Part 1 - Image Signing with Notation"})]}),"\n",(0,i.jsx)(t.p,{children:"In this post, we'll walk through the steps to manually configure AKS with Gatekeeper and the Ratify project to enforce an image signature verification policy."}),"\n",(0,i.jsx)(t.h2,{id:"cluster-creation-and-setup",children:"Cluster Creation and Setup"}),"\n",(0,i.jsx)(t.p,{children:"For Ratify to work with Gatekeeper, we'll need a cluster with both the OIDC Issuer and Workload Idenitty add-ons enabled. In the last step below, we'll grab the OIDC Issuer URL for the cluster, which is used when you want to federate a Kubernetes Service Account with an Azure Active Directory Identity."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'# Set environment variables\nRG=EphNotationTesting\nLOC=eastus\nACR_NAME=mynotationlab\nCLUSTER_NAME=imagesigninglab\n\n# Create the AKS Cluster\naz aks create -g $RG -n $CLUSTER_NAME \\\n--attach-acr $ACR_NAME \\\n--enable-oidc-issuer \\\n--enable-workload-identity\n\n# Get the cluster credentials\naz aks get-credentials -g $RG -n $CLUSTER_NAME\n\n# Get the OIDC Issuer URL\nexport AKS_OIDC_ISSUER="$(az aks show -n ${CLUSTER_NAME} -g ${RG} --query "oidcIssuerProfile.issuerUrl" -otsv)"\n'})}),"\n",(0,i.jsx)(t.h2,{id:"managed-identity-setup",children:"Managed Identity Setup"}),"\n",(0,i.jsx)(t.p,{children:"Ratify will need to be able to read from the Key Vault, so we'll need to create a managed identity and grant it the proper rights on Azure Container Registry. The only right needed is 'acrpull', as ratify will pull the image to check it's signature."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'SUBSCRIPTION=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx\nTENANT_ID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx\nIDENTITY_NAME=ratify-identity\nRATIFY_NAMESPACE=gatekeeper-system\n\n# Create the ratify identity\naz identity create --name "${IDENTITY_NAME}" --resource-group "${RG}" --location "${LOC}" --subscription "${SUBSCRIPTION}"\n\n# Get the identity IDs\nexport IDENTITY_OBJECT_ID="$(az identity show --name "${IDENTITY_NAME}" --resource-group "${RG}" --query \'principalId\' -otsv)"\nexport IDENTITY_CLIENT_ID=$(az identity show --name ${IDENTITY_NAME} --resource-group ${RG} --query \'clientId\' -o tsv)\n\n# Grant the ratify identity acr pull rights\naz role assignment create \\\n--assignee-object-id ${IDENTITY_OBJECT_ID} \\\n--role acrpull \\\n--scope subscriptions/${SUBSCRIPTION}/resourceGroups/${RG}/providers/Microsoft.ContainerRegistry/registries/${ACR_NAME}\n\n# Federate the managed identity to the service account used by ratify\naz identity federated-credential create \\\n--name ratify-federated-credential \\\n--identity-name "${IDENTITY_NAME}" \\\n--resource-group "${RG}" \\\n--issuer "${AKS_OIDC_ISSUER}" \\\n--subject system:serviceaccount:"${RATIFY_NAMESPACE}":"ratify-admin"\n'})}),"\n",(0,i.jsx)(t.p,{children:"Since Ratify will be checking the signature, it also needs the ability to get the secret from Azure Key Vault."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Grant the ratify identity rights\naz keyvault set-policy --name ${AKV_NAME} \\\n--secret-permissions get \\\n--object-id ${IDENTITY_OBJECT_ID}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"install-gatekeeper-and-ratify",children:"Install Gatekeeper and Ratify"}),"\n",(0,i.jsxs)(t.p,{children:["While AKS does, now in preview, have a ",(0,i.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/azure/aks/image-integrity?tabs=azure-cli",children:"managed add-on for gatekeeper and ratify"}),", it's still in preview. For this post, we'll manually install both Gatekeeper and Ratify so that we can see all the moving parts and more easily debug any issues."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'# Install Gatekeeper\nhelm repo add gatekeeper https://open-policy-agent.github.io/gatekeeper/charts\n\nhelm install gatekeeper/gatekeeper  \\\n    --name-template=gatekeeper \\\n    --namespace ${RATIFY_NAMESPACE} --create-namespace \\\n    --set enableExternalData=true \\\n    --set validatingWebhookTimeoutSeconds=5 \\\n    --set mutatingWebhookTimeoutSeconds=2\n\n# Get the key vault URI which ratify will need\nexport VAULT_URI=$(az keyvault show --name ${AKV_NAME} --resource-group ${RG} --query "properties.vaultUri" -o tsv)\n\n# Install Ratify\nhelm repo add ratify https://ratify-project.github.io/ratify\n\nhelm install ratify \\\n    ratify/ratify --atomic \\\n    --namespace ${RATIFY_NAMESPACE} --create-namespace \\\n    --set featureFlags.RATIFY_CERT_ROTATION=true \\\n    --set akvCertConfig.enabled=true \\\n    --set akvCertConfig.vaultURI=${VAULT_URI} \\\n    --set akvCertConfig.cert1Name=${CERT_NAME} \\\n    --set akvCertConfig.tenantId=${TENANT_ID} \\\n    --set oras.authProviders.azureWorkloadIdentityEnabled=true \\\n    --set azureWorkloadIdentity.clientId=${IDENTITY_CLIENT_ID}\n'})}),"\n",(0,i.jsx)(t.p,{children:"Now that gatekeeper and ratify are running, lets apply a new constraint and policy template for the image verification policy. You should inspect the two files in the commands below for your own knowledge of how they work."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Create the gatekeeper policy template\nkubectl apply -f https://raw.githubusercontent.com/swgriffith/azure-guides/master/image-signing/ratify-policy-template.yaml\n\n# Apply the policy with a gatekeeper constraint\nkubectl apply -f https://raw.githubusercontent.com/swgriffith/azure-guides/master/image-signing/ratify-policy-constraint.yaml\n"})}),"\n",(0,i.jsx)(t.h2,{id:"test-the-policy",children:"Test the policy!"}),"\n",(0,i.jsx)(t.p,{children:"Our setup is complete. We can now try to create a pod using an unsigned and signed container image."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'# First try to use the docker hub nginx image, which is unsigned\n# This should fail\nkubectl run demo --namespace default --image=nginx:latest\n\n# Sample Error Message\nError from server (Forbidden): admission webhook "validation.gatekeeper.sh" denied the request: [ratify-constraint] Subject failed verification: docker.io/library/nginx@sha256:86e53c4c16a6a276b204b0fd3a8143d86547c967dc8258b3d47c3a21bb68d3c6\n\n# Now try using our container image\n# This pod should be successfully created!\nkubectl run demo --namespace default --image=$ACR_NAME.azurecr.io/nginx@$IMAGE_SHA\n'})}),"\n",(0,i.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsxs)(t.p,{children:["Between this post and ",(0,i.jsx)(t.a,{href:"./part1-notation-usage.html",children:"Part 1"}),", we learned about the notation cli tool, which can be used to sign container images via the notary specification. We signed images with both a local test certificate, as well as a certificate managed by Azure Key Vault. Finally, we enabled Gatekeeper and Ratify on an AKS cluster to provide an image signature verification policy."]})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var a=n(6540);const i={},r=a.createContext(i);function s(e){const t=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);