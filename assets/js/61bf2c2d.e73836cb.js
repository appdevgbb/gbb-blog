"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[7811],{650:e=>{e.exports=JSON.parse('{"permalink":"/2023/11/27/capabilities-in-aks","editUrl":"https://github.com/appdevgbb/gbb-blog/tree/main/docusaurus/blog/2023-11-27/capabilities-in-aks/index.md","source":"@site/blog/2023-11-27/capabilities-in-aks/index.md","title":"Using Linux Capabilities in AKS","description":"An exploration on how to use Linux capabilities(7) in AKS.","date":"2023-11-27T00:00:00.000Z","tags":[],"readingTime":2.22,"hasTruncateMarker":true,"authors":[{"name":"Diego Casati","title":"Principal Cloud Architect, Azure Global Black Belt","url":"https://github.com/dcasati","socials":{"x":"https://x.com/ve6dpc","github":"https://github.com/dcasati"},"imageURL":"https://github.com/dcasati.png","key":"diego_casati","page":null}],"frontMatter":{"authors":["diego_casati"],"date":"2023-11-27","description":"An exploration on how to use Linux capabilities(7) in AKS.","tags":[],"title":"Using Linux Capabilities in AKS"},"unlisted":false,"prevItem":{"title":"Using External DNS in AKS with Azure Workload Identity","permalink":"/2023/12/18/external-dns-workload-identity"},"nextItem":{"title":"Image Verification Part 1 - Notation CLI","permalink":"/2023/11/09/part1-notation-usage"}}')},2982:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>l});var t=i(650),a=i(4848),s=i(8453);const o={authors:["diego_casati"],date:"2023-11-27",description:"An exploration on how to use Linux capabilities(7) in AKS.",tags:[],title:"Using Linux Capabilities in AKS"},c="Using capabilities in AKS",r={authorsImageUrls:[void 0]},l=[{value:"Introduction",id:"introduction",level:2},{value:"Approaches",id:"approaches",level:2},{value:"Conclusion",id:"conclusion",level:2}];function p(e){const n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsxs)(n.p,{children:["Right after Kubernetes 1.21, the way ",(0,a.jsx)(n.a,{href:"https://man7.org/linux/man-pages/man7/capabilities.7.html",children:"Capabilities(7)"})," worked in Kubernetes changed. At that version, a change in the upstream code enforced that Capabilities will only work when ",(0,a.jsx)(n.code,{children:"runAsUser"})," is set to ",(0,a.jsx)(n.code,{children:"0"})," - meaning ",(0,a.jsx)(n.code,{children:"root"}),". This is somewhat counterintuitive to what most of us would expect but code goes into the reasoning and how to work with Capabilities after 1.21."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.a,{href:"https://github.com/containerd/containerd/blob/main/pkg/cri/server/container_create_linux.go#L260-L267",children:"code"})," that prevents any user other than ",(0,a.jsx)(n.code,{children:"root"})," to have capabilities. This was added by the commit referenced ",(0,a.jsx)(n.a,{href:"https://github.com/containerd/containerd/commit/50c73e6dc550c2cdb579e303ac26394497f9f331",children:"here"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-golang",children:"\t// Clear all ambient capabilities. The implication of non-root + caps\n\t// is not clearly defined in Kubernetes.\n\t// See https://github.com/kubernetes/kubernetes/issues/56374\n\t// Keep docker's behavior for now.\n\tspecOpts = append(specOpts,\n\t\tcustomopts.WithoutAmbientCaps,\n\t\tcustomopts.WithSelinuxLabels(processLabel, mountLabel),\n\t)\n"})}),"\n",(0,a.jsxs)(n.p,{children:["On the previous note, we can add/remove capabilities to ",(0,a.jsx)(n.code,{children:"root"})," - which essentially removes a lot of the superpowers that ",(0,a.jsx)(n.code,{children:"root"})," have on by default (e.g.: cap_net_admin)."]}),"\n",(0,a.jsx)(n.h2,{id:"approaches",children:"Approaches"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Using ",(0,a.jsx)(n.code,{children:"RunAsUser: 0"})," but restricting the capabilities in the account"]}),"\n",(0,a.jsxs)(n.p,{children:["In the example below we will be granting ",(0,a.jsx)(n.code,{children:"cap_ipc_lock"})," to the running user (root) and nothing else."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'apiVersion: apps/v1\nkind: Deployment\nmetadata:\nlabels:\n    app: gbbapp\nname: gbbapp\nnamespace: ns-gbb\nspec:\nreplicas: 1\nselector:\n    matchLabels:\n    app: gbbapp\ntemplate:\n    metadata:\n    labels:\n    app: gbbapp\n    spec:\n    containers:\n    - name: gbbapp\n        image: gbbapp/k8s:cfa\n        command: ["/bin/bash"]\n        args: ["-c", "sleep 3600"]\n        securityContext:\n        runAsUser: 0\n        capabilities:\n            drop: ["ALL"]\n            add: ["IPC_LOCK"]\n'})}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsx)(n.li,{children:"Adding capabilities to binaries during the build process"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["It is possible to add capabilities during the build process with docker/podman. With this approach you can remove the ",(0,a.jsx)(n.code,{children:"RunAsUser"})," parameter altogether. The capabilities added there will persist when the image runs as a container. The following example adds ",(0,a.jsx)(n.code,{children:"cap_ipc_lock"})," to python3.8"]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Create a Dockerfile"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-Dockerfile",children:'FROM ubuntu\n\nRUN apt-get update && apt-get install -y libcap2-bin && \\\n    setcap cap_ipc_lock+eip /usr/bin/python3.8\n\nCMD ["/bin/bash"]\n'})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Create an ACR instance"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"RESOURCE_GROUP_NAME=rg-setcomp\nLOCATION=westus\nACR_NAME=myacrname\n\naz group create --name ${RESOURCE_GROUP_NAME} --location ${LOCATION}\naz acr create -n ${ACR_NAME} -l ${LOCATION}\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Add the container to ACR"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"az acr build -r ${MY_ACR}/setcomp:{{.Run.ID}} .\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Exec into the container and verify that the capability was added by running the ",(0,a.jsx)(n.code,{children:"getcap"})," command against a binary, which in this case is ",(0,a.jsx)(n.code,{children:"python3.8"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"$ getcap /usr/bin/python3.8\n/usr/bin/python3.8 = cap_ipc_lock+eip\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,a.jsx)(n.p,{children:"In this article we've explored how to enable Capabilities for a container and how to limit it's scope. You now have the pieces and bits needed to enable the minimum amount of capabilities for any given container."})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>c});var t=i(6540);const a={},s=t.createContext(a);function o(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);