"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[2514],{3172:e=>{e.exports=JSON.parse('{"permalink":"/2023/12/19/workload-identity-blob-example","editUrl":"https://github.com/appdevgbb/gbb-blog/tree/main/docusaurus/blog/2023-12-19/workload-identity-blob-example/index.md","source":"@site/blog/2023-12-19/workload-identity-blob-example/index.md","title":"Using Workload Idenity to Access Azure Blob Storage","description":"In this post we\'ll show the steps needed to create an AKS cluster, enabled with Azure Workload Identity and then we\'ll build a sample dotnet app that writes files to Azure Blob Storage","date":"2023-12-19T00:00:00.000Z","tags":[],"readingTime":4.52,"hasTruncateMarker":true,"authors":[{"name":"Steve Griffith","title":"Principal Cloud Architect, Azure Global Black Belt","url":"https://github.com/swgriffith","socials":{"x":"https://x.com/SteveGriffith","github":"https://github.com/swgriffith"},"imageURL":"https://github.com/swgriffith.png","key":"steve_griffith","page":null}],"frontMatter":{"authors":["steve_griffith"],"date":"2023-12-19","description":"In this post we\'ll show the steps needed to create an AKS cluster, enabled with Azure Workload Identity and then we\'ll build a sample dotnet app that writes files to Azure Blob Storage","tags":[],"title":"Using Workload Idenity to Access Azure Blob Storage"},"unlisted":false,"prevItem":{"title":"Securing your AKS cluster with a Linux Firewall VM","permalink":"/2024/02/02/securing-your-aks-cluster-with-a-linux-firewall-vm"},"nextItem":{"title":"Using External DNS in AKS with Azure Workload Identity","permalink":"/2023/12/18/external-dns-workload-identity"}}')},6635:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var a=n(3172),o=n(4848),r=n(8453);const i={authors:["steve_griffith"],date:"2023-12-19",description:"In this post we'll show the steps needed to create an AKS cluster, enabled with Azure Workload Identity and then we'll build a sample dotnet app that writes files to Azure Blob Storage",tags:[],title:"Using Workload Idenity to Access Azure Blob Storage"},s="Workload Identity to Blob Storage",l={authorsImageUrls:[void 0]},c=[{value:"Cluster Creation",id:"cluster-creation",level:3},{value:"Set up the identity",id:"set-up-the-identity",level:3},{value:"Create the Blob Storage Account",id:"create-the-blob-storage-account",level:3},{value:"Create the sample app",id:"create-the-sample-app",level:2},{value:"Conclusion",id:"conclusion",level:3}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["The following walkthrough shows how you can using ",(0,o.jsx)(t.a,{href:"https://azure.github.io/azure-workload-identity/docs/",children:"Azure Workload Identity"})," with the ",(0,o.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/azure/aks/workload-identity-overview",children:"AKS Workload Identity"})," add-on along with ",(0,o.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/azure/active-directory/develop/reference-v2-libraries",children:"MSAL"})," to access an Azure Blob Storage Account."]}),"\n",(0,o.jsx)(t.h3,{id:"cluster-creation",children:"Cluster Creation"}),"\n",(0,o.jsx)(t.p,{children:"Now lets create the AKS cluster with the OIDC Issuer and Workload Identity add-on enabled."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"RG=WorkloadIdentityRG\nLOC=eastus\nCLUSTER_NAME=wilab\nUNIQUE_ID=$CLUSTER_NAME$RANDOM\nACR_NAME=$UNIQUE_ID\nSTORAGE_ACCT_NAME=griffdemo\n\n# Create the resource group\naz group create -g $RG -l $LOC\n\n# Create the cluster with the OIDC Issuer and Workload Identity enabled\naz aks create -g $RG -n $CLUSTER_NAME \\\n--node-count 1 \\\n--enable-oidc-issuer \\\n--enable-workload-identity \\\n--generate-ssh-keys\n\n# Get the cluster credentials\naz aks get-credentials -g $RG -n $CLUSTER_NAME\n"})}),"\n",(0,o.jsx)(t.h3,{id:"set-up-the-identity",children:"Set up the identity"}),"\n",(0,o.jsx)(t.p,{children:"In order to federate a managed identity with a Kubernetes Service Account we need to get the AKS OIDC Issure URL, create the Managed Identity and Service Account and then create the federation."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:'# Get the OIDC Issuer URL\nexport AKS_OIDC_ISSUER="$(az aks show -n $CLUSTER_NAME -g $RG --query "oidcIssuerProfile.issuerUrl" -otsv)"\n\n# Create the managed identity\naz identity create --name wi-demo-identity --resource-group $RG --location $LOC\n\n# Get identity client ID\nexport USER_ASSIGNED_CLIENT_ID=$(az identity show --resource-group $RG --name wi-demo-identity --query \'clientId\' -o tsv)\n\n# Create a service account to federate with the managed identity\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  annotations:\n    azure.workload.identity/client-id: ${USER_ASSIGNED_CLIENT_ID}\n  labels:\n    azure.workload.identity/use: "true"\n  name: wi-demo-sa\n  namespace: default\nEOF\n\n# Federate the identity\naz identity federated-credential create \\\n--name wi-demo-federated-id \\\n--identity-name wi-demo-identity \\\n--resource-group $RG \\\n--issuer ${AKS_OIDC_ISSUER} \\\n--subject system:serviceaccount:default:wi-demo-sa\n'})}),"\n",(0,o.jsx)(t.h3,{id:"create-the-blob-storage-account",children:"Create the Blob Storage Account"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:'# Create a blob storage account\naz storage account create \\\n--name $STORAGE_ACCT_NAME \\\n--resource-group $RG \\\n--location $LOC \\\n--sku Standard_LRS \\\n--encryption-services blob\n\n# Get the resource ID of the storage account\nSTORAGE_ACCT_ID=$(az storage account show -g $RG -n $STORAGE_ACCT_NAME --query id -o tsv)\n\n# Get the current signed in user ID\nCURRENT_USER=$(az ad signed-in-user show --query id -o tsv)\n\n# Grant the current user contributor rights for testing\naz role assignment create \\\n--role "Storage Blob Data Contributor" \\\n--assignee $CURRENT_USER \\\n--scope "${STORAGE_ACCT_ID}"\n\n# Grant the managed identity contributor rights\naz role assignment create \\\n--role "Storage Blob Data Contributor" \\\n--assignee $USER_ASSIGNED_CLIENT_ID \\\n--scope "${STORAGE_ACCT_ID}"\n\n# Create a storage account container with login auth mode enabled\naz storage container create --account-name $STORAGE_ACCT_NAME --name data --auth-mode login\n'})}),"\n",(0,o.jsx)(t.h2,{id:"create-the-sample-app",children:"Create the sample app"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"# Create and test a new console app\ndotnet new console -n blob-console-app\ncd blob-console-app\ndotnet run\n\n# Add the Key Vault and Azure Identity Packages\ndotnet add package Azure.Storage.Blobs\ndotnet add package Azure.Identity\n"})}),"\n",(0,o.jsx)(t.p,{children:"Edit the app as follows:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-csharp",children:'using Azure.Storage.Blobs;\nusing Azure.Storage.Blobs.Models;\nusing System;\nusing System.IO;\nusing Azure.Identity;\n\nclass Program\n    {\n        static void Main(string[] args)\n        {\n          // Get Storage Account Name\n          string? storageAcctName = Environment.GetEnvironmentVariable("STORAGE_ACCT_NAME");;\n          // Get the Storage Container Name\n          string? containerName = Environment.GetEnvironmentVariable("CONTAINER_NAME");;\n\n          // Check values for null or empty\n          if (string.IsNullOrEmpty(storageAcctName)||string.IsNullOrEmpty(containerName))\n          {\n            Console.WriteLine("Storage Account or Container Name are null or empty");\n            Environment.Exit(0);\n          }\n\n          while (true)\n          {\n            MainAsync(storageAcctName,containerName).Wait();\n            System.Threading.Thread.Sleep(5000);\n          }\n          \n        }\n\n        static async Task MainAsync(string storageAcctName, string containerName)\n        {\n          var blobServiceClient = new BlobServiceClient(\n                  new Uri(String.Format("https://{0}.blob.core.windows.net",storageAcctName)),\n                  new DefaultAzureCredential());\n\n          BlobContainerClient containerClient = blobServiceClient.GetBlobContainerClient(containerName);\n\n          // Create a local file in the ./data/ directory for uploading and downloading\n          string localPath = "data";\n          Directory.CreateDirectory(localPath);\n          string fileName = Guid.NewGuid().ToString() + ".txt";\n          string localFilePath = Path.Combine(localPath, fileName);\n\n          // Write text to the file\n          await File.WriteAllTextAsync(localFilePath, "Hello, World!");\n\n          // Get a reference to a blob\n          BlobClient blobClient = containerClient.GetBlobClient(fileName);\n\n          Console.WriteLine("Uploading to Blob storage as blob:\\n\\t {0}\\n", blobClient.Uri);\n\n          // Upload data from the local file\n          await blobClient.UploadAsync(localFilePath, true);\n        }\n\n    }\n'})}),"\n",(0,o.jsx)(t.p,{children:"Create a new Dockerfile with the following:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:'FROM mcr.microsoft.com/dotnet/sdk:7.0 AS build-env\nWORKDIR /App\n\n# Copy everything\nCOPY . ./\n# Restore as distinct layers\nRUN dotnet restore\n# Build and publish a release\nRUN dotnet publish -c Release -o out\n\n# Build runtime image\nFROM mcr.microsoft.com/dotnet/aspnet:7.0\nWORKDIR /App\nCOPY --from=build-env /App/out .\nENTRYPOINT ["dotnet", "blob-console-app.dll"]\n'})}),"\n",(0,o.jsx)(t.p,{children:"Build the image. I'll create an Azure Container Registry and build there, and then link that ACR to my AKS cluster."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"# Create the ACR\naz acr create -g $RG -n $ACR_NAME --sku Standard\n\n# Build the image\naz acr build -t wi-blob-test -r $ACR_NAME .\n\n# Link the ACR to the AKS cluster\naz aks update -g $RG -n $CLUSTER_NAME --attach-acr $ACR_NAME\n"})}),"\n",(0,o.jsx)(t.p,{children:"Now deploy a pod that runs our blob storage app using the service account identity."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:'\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Pod\nmetadata:\n  name: wi-blob-test\n  namespace: default\n  labels:\n    azure.workload.identity/use: "true"  \nspec:\n  serviceAccountName: wi-demo-sa\n  containers:\n    - image: ${ACR_NAME}.azurecr.io/wi-blob-test\n      name: wi-blob-test\n      env:\n      - name: STORAGE_ACCT_NAME\n        value: ${STORAGE_ACCT_NAME}\n      - name: CONTAINER_NAME\n        value: data      \n  nodeSelector:\n    kubernetes.io/os: linux\nEOF\n\n# Check the pod logs\nkubectl logs -f wi-blob-test\n\n# Sample Output\nUploading to Blob storage as blob:\n\t https://griffdemo.blob.core.windows.net/data/quickstart3efa9a81-9672-4617-a6ff-f11fb93d7c84.txt\n\nUploading to Blob storage as blob:\n\t https://griffdemo.blob.core.windows.net/data/quickstart23968d6b-80c5-4c82-8bcf-860fa00edbd3.txt\n\nUploading to Blob storage as blob:\n\t https://griffdemo.blob.core.windows.net/data/quickstart0e20e7ef-c3ba-4fd3-a3d5-c27579d2ba96.txt\n'})}),"\n",(0,o.jsx)(t.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsx)(t.p,{children:"Congrats! You should now have a working pod that uses MSAL along with a Kubernetes Service Account federated to an Azure Managed Identity to access Azure Blob Storage."})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>s});var a=n(6540);const o={},r=a.createContext(o);function i(e){const t=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);