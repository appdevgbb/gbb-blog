"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[6080],{894:e=>{e.exports=JSON.parse('{"permalink":"/2023/09/21/agc-egress-lockdown","editUrl":"https://github.com/appdevgbb/gbb-blog/tree/main/docusaurus/blog/2023-09-21/agc-egress-lockdown/index.md","source":"@site/blog/2023-09-21/agc-egress-lockdown/index.md","title":"Using App Gateway for Containers with Egress Lockdown","description":"Demonstrat how to setup the new Azure App Gateway for Containers (AGC) managed ingress controllers with egress lockdown","date":"2023-09-21T00:00:00.000Z","tags":[],"readingTime":7.18,"hasTruncateMarker":true,"authors":[{"name":"Steve Griffith","title":"Principal Cloud Architect, Azure Global Black Belt","url":"https://github.com/swgriffith","socials":{"x":"https://x.com/SteveGriffith","github":"https://github.com/swgriffith"},"imageURL":"https://github.com/swgriffith.png","key":"steve_griffith","page":null}],"frontMatter":{"authors":["steve_griffith"],"date":"2023-09-21","description":"Demonstrat how to setup the new Azure App Gateway for Containers (AGC) managed ingress controllers with egress lockdown","tags":[],"title":"Using App Gateway for Containers with Egress Lockdown"},"unlisted":false,"prevItem":{"title":"AKS User Minimum Roles","permalink":"/2023/10/12/aks-user-min-roles"},"nextItem":{"title":"Using Kubelogin with AKS via Terraform","permalink":"/2023/09/21/kubelogin-terraform"}}')},2320:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var a=t(894),r=t(4848),o=t(8453);const s={authors:["steve_griffith"],date:"2023-09-21",description:"Demonstrat how to setup the new Azure App Gateway for Containers (AGC) managed ingress controllers with egress lockdown",tags:[],title:"Using App Gateway for Containers with Egress Lockdown"},i=void 0,l={authorsImageUrls:[void 0]},c=[{value:"Setup",id:"setup",level:2},{value:"Resource Group and Vnet",id:"resource-group-and-vnet",level:3},{value:"Firewall",id:"firewall",level:3},{value:"Firewall Rules",id:"firewall-rules",level:3},{value:"Route Table",id:"route-table",level:3},{value:"Cluster Creation",id:"cluster-creation",level:3},{value:"Setup App Gateway for Containers",id:"setup-app-gateway-for-containers",level:3},{value:"Deploy the Application LoadBalancer Instance",id:"deploy-the-application-loadbalancer-instance",level:3},{value:"Deploy the test app",id:"deploy-the-test-app",level:3}];function u(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"This walkthrough demonstates the setup of the new Azure App Gateway for Containers (hereafter AGC) managed ingress controller on a cluster configured with egress traffic forced to an Azure Firewall and with the cluster configured with outboundType Route Table."}),"\n",(0,r.jsxs)(n.p,{children:["The YAML files for this walk through are located ",(0,r.jsx)(n.a,{href:"https://github.com/swgriffith/azure-guides/tree/master/agc-egresslockdown",children:"here"})]}),"\n",(0,r.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,r.jsx)(n.p,{children:"For this setup we'll need to create the following:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Resource Group"}),"\n",(0,r.jsx)(n.li,{children:"Vnet with subnets for the Firewall, AGC and AKS Cluster"}),"\n",(0,r.jsx)(n.li,{children:"Azure Firewall"}),"\n",(0,r.jsx)(n.li,{children:"Firewall Rules needed for AKS to function"}),"\n",(0,r.jsx)(n.li,{children:"Route Table with Default Route (0.0.0.0/0) to the firewall"}),"\n",(0,r.jsx)(n.li,{children:"AKS Cluster"}),"\n",(0,r.jsx)(n.li,{children:"AGC"}),"\n",(0,r.jsx)(n.li,{children:"Test app deployed to the cluster"}),"\n",(0,r.jsx)(n.li,{children:"Gateway Instance"}),"\n",(0,r.jsx)(n.li,{children:"HTTP Route"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"resource-group-and-vnet",children:"Resource Group and Vnet"}),"\n",(0,r.jsx)(n.p,{children:"First create the Resource Group and virtual network we'll use for the deployment. We'll also create the subnet that the Azure Firewall will use, since we'll be deploying that next."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Resource Group Creation\nRG=EphAGCEgressLock2\nLOC=eastus\naz group create -g $RG -l $LOC\n\n# Get the resource group id\nRG_ID=$(az group show -g $RG -o tsv --query id)\n\n# Set an environment variable for the VNet name\nVNET_NAME=reddog-vnet\n\n# Create the Vnet along with the initial subet for AKS\naz network vnet create \\\n-g $RG \\\n-n $VNET_NAME \\\n--address-prefix 10.140.0.0/16 \\\n--subnet-name aks \\\n--subnet-prefix 10.140.0.0/24\n\n# Get a subnet resource ID\nVNET_SUBNET_ID=$(az network vnet subnet show -g $RG --vnet-name $VNET_NAME -n aks -o tsv --query id)\n\n# Adding a subnet for the Azure Firewall\naz network vnet subnet create \\\n--resource-group $RG \\\n--vnet-name $VNET_NAME \\\n--name AzureFirewallSubnet \\\n--address-prefix 10.140.1.0/24\n"})}),"\n",(0,r.jsx)(n.h3,{id:"firewall",children:"Firewall"}),"\n",(0,r.jsx)(n.p,{children:"Now to create the Azure Firewall."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Create Azure Firewall Public IP\naz network public-ip create -g $RG -n azfirewall-ip --sku "Standard"\n\n# Create Azure Firewall\naz extension add --name azure-firewall\nFIREWALLNAME=reddog-egress\naz network firewall create -g $RG -n $FIREWALLNAME --enable-dns-proxy true\n\n# Configure Firewall IP Config\naz network firewall ip-config create -g $RG -f $FIREWALLNAME -n aks-firewallconfig --public-ip-address azfirewall-ip --vnet-name $VNET_NAME\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"firewall-rules",children:"Firewall Rules"}),"\n",(0,r.jsx)(n.p,{children:"With the firewall created, we'll add the rules needed to ensure AKS can operate. You can add additional rules here as needed."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"az network firewall network-rule create \\\n-g $RG \\\n-f $FIREWALLNAME \\\n--collection-name 'aksfwnr' \\\n-n 'aksapiudp' \\\n--protocols 'UDP' \\\n--source-addresses '*' \\\n--destination-addresses \"AzureCloud.$LOC\" \\\n--destination-ports 1194 --action allow --priority 100\n\naz network firewall network-rule create \\\n-g $RG \\\n-f $FIREWALLNAME \\\n--collection-name 'aksfwnr' \\\n-n 'aksapitcp' \\\n--protocols 'TCP' \\\n--source-addresses '*' \\\n--destination-addresses \"AzureCloud.$LOC\" \\\n--destination-ports 9000 443\n\naz network firewall network-rule create \\\n-g $RG \\\n-f $FIREWALLNAME \\\n--collection-name 'aksfwnr' \\\n-n 'time' \\\n--protocols 'UDP' \\\n--source-addresses '*' \\\n--destination-fqdns 'ntp.ubuntu.com' \\\n--destination-ports 123\n\n\n# Add FW Application Rules\naz network firewall application-rule create \\\n-g $RG \\\n-f $FIREWALLNAME \\\n--collection-name 'aksfwar' \\\n-n 'fqdn' \\\n--source-addresses '*' \\\n--protocols 'http=80' 'https=443' \\\n--fqdn-tags \"AzureKubernetesService\" \\\n--action allow --priority 100\n\nTARGET_FQDNS=('mcr.microsoft.com' \\\n'*.data.mcr.microsoft.com' \\\n'management.azure.com' \\\n'login.microsoftonline.com' \\\n'packages.microsoft.com' \\\n'acs-mirror.azureedge.net')\n\naz network firewall application-rule create \\\n-g $RG \\\n-f $FIREWALLNAME \\\n--collection-name 'aksfwar2' \\\n-n 'fqdn' \\\n--source-addresses '*' \\\n--protocols 'http=80' 'https=443' \\\n--target-fqdns $TARGET_FQDNS[@] \\\n--action allow --priority 101\n"})}),"\n",(0,r.jsx)(n.h3,{id:"route-table",children:"Route Table"}),"\n",(0,r.jsx)(n.p,{children:"With the firewall created, we'll set up the route table to ensure that egress traffic is sent to the firewall and then we'll attach this route table to the AKS cluster subnet."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# First get the public and private IP of the firewall for the routing rules\nFWPUBLIC_IP=$(az network public-ip show -g $RG -n azfirewall-ip --query "ipAddress" -o tsv)\nFWPRIVATE_IP=$(az network firewall show -g $RG -n $FIREWALLNAME --query "ipConfigurations[0].privateIPAddress" -o tsv)\n\n# Create Route Table\naz network route-table create \\\n-g $RG \\\n-n aksdefaultroutes\n\n# Create Route\naz network route-table route create \\\n-g $RG \\\n--route-table-name aksdefaultroutes \\\n-n firewall-route \\\n--address-prefix 0.0.0.0/0 \\\n--next-hop-type VirtualAppliance \\\n--next-hop-ip-address $FWPRIVATE_IP\n\naz network route-table route create \\\n-g $RG \\\n--route-table-name aksdefaultroutes \\\n-n internet-route \\\n--address-prefix $FWPUBLIC_IP/32 \\\n--next-hop-type Internet\n\n# Associate Route Table to AKS Subnet\naz network vnet subnet update \\\n-g $RG \\\n--vnet-name $VNET_NAME \\\n-n aks \\\n--route-table aksdefaultroutes\n'})}),"\n",(0,r.jsx)(n.h3,{id:"cluster-creation",children:"Cluster Creation"}),"\n",(0,r.jsx)(n.p,{children:"Next we'll create the AKS Cluster. We'll set this up with a single node, for testing purposes and will enable outboundType for userDefinedRouting. We'll also enable the OIDC Issuer and workload identity, as they're used by AGC later."}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"NOTE:"})," At this time, AGC only supports Azure CNI in standard mode, not in 'Overlay' mode. If you try another option here it will not work."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# NOTE: Make sure you give your cluster a unique name\nCLUSTER_NAME=acglab\n\n# Cluster Creation Command\naz aks create \\\n-g $RG \\\n-n $CLUSTER_NAME \\\n--nodepool-name systempool \\\n--node-vm-size Standard_D2_v4 \\\n--node-count 1 \\\n--network-plugin azure \\\n--network-policy calico \\\n--vnet-subnet-id $VNET_SUBNET_ID \\\n--outbound-type userDefinedRouting \\\n--enable-managed-identity \\\n--enable-oidc-issuer \\\n--enable-workload-identity \n\n# Grab the cluster credentials\naz aks get-credentials -g $RG -n $CLUSTER_NAME\n"})}),"\n",(0,r.jsx)(n.h3,{id:"setup-app-gateway-for-containers",children:"Setup App Gateway for Containers"}),"\n",(0,r.jsxs)(n.p,{children:["Now that our cluster is working we can add a new subnet for the AGC and run through all the steps for setting up the application controler, based on the setup guide ",(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/azure/application-gateway/for-containers/quickstart-deploy-application-gateway-for-containers-alb-controller?tabs=install-helm-windows",children:"here"}),". That involved getting the subnet ID and Managed Cluster ID, creating a managed Identity, federating that managed identity with a Kubernetes Service Account, granting the identity the rights documented in the product setup and then finally installing the Application Load Balancer controller via Helm."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Create the AGC subnet\naz network vnet subnet create \\\n--resource-group $RG \\\n--vnet-name $VNET_NAME \\\n--name subnet-alb \\\n--address-prefixes 10.140.2.0/24 \\\n--delegations \'Microsoft.ServiceNetworking/trafficControllers\'\n\n# Get the AGC Subnet ID\nALB_SUBNET_ID=$(az network vnet subnet show --name subnet-alb --resource-group $RG --vnet-name $VNET_NAME --query \'[id]\' --output tsv)\n\n# Get the Managed Cluster Resource Group and ID\nMC_RG=$(az aks show --resource-group $RG --name $CLUSTER_NAME --query "nodeResourceGroup" -o tsv)\nMC_RG_ID=$(az group show --name $MC_RG --query id -otsv)\n\n# Create a new managed identity and get its principal ID\nIDENTITY_RESOURCE_NAME=\'azure-alb-identity\'\naz identity create --resource-group $RG --name $IDENTITY_RESOURCE_NAME\nPRINCIPAL_ID="$(az identity show -g $RG -n $IDENTITY_RESOURCE_NAME --query principalId -otsv)"\n\n# Assign the managed identity reader rights on the managed cluster resource group\naz role assignment create --assignee-object-id $PRINCIPAL_ID --assignee-principal-type ServicePrincipal --scope $MC_RG_ID --role "acdd72a7-3385-48ef-bd42-f606fba81ae7" # Reader role\n\n# Get the OIDC Issuer Name and federate a service account, which will be created later, with the managed identity we created above\nAKS_OIDC_ISSUER="$(az aks show -n "$CLUSTER_NAME" -g "$RG" --query "oidcIssuerProfile.issuerUrl" -o tsv)"\n\naz identity federated-credential create --name "azure-alb-identity" \\\n--identity-name "$IDENTITY_RESOURCE_NAME" \\\n--resource-group $RG \\\n--issuer "$AKS_OIDC_ISSUER" \\\n--subject "system:serviceaccount:azure-alb-system:alb-controller-sa"\n\n# Install the Application Load Balancer for AGC via Helm\nhelm install alb-controller oci://mcr.microsoft.com/application-lb/charts/alb-controller \\\n--version 0.4.023971 \\\n--set albController.podIdentity.clientID=$(az identity show -g $RG -n azure-alb-identity --query clientId -o tsv)\n\n# Verify that the pods start and check that the gateway setup completed successfully\nwatch kubectl get pods -n azure-alb-system\nkubectl get gatewayclass azure-alb-external -o yaml\n'})}),"\n",(0,r.jsx)(n.h3,{id:"deploy-the-application-loadbalancer-instance",children:"Deploy the Application LoadBalancer Instance"}),"\n",(0,r.jsx)(n.p,{children:"With the Application Load Balancer Controller running, we now want to create an instance of the ALB in Kubernetes. We'll need to give the managed identity some additional rights."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Delegate AppGw for Containers Configuration Manager role to AKS Managed Cluster RG\naz role assignment create --assignee-object-id $PRINCIPAL_ID --assignee-principal-type ServicePrincipal --scope $MC_RG_ID --role "fbc52c3f-28ad-4303-a892-8a056630b8f1"  \n# Delegate Network Contributor permission for join to association subnet\naz role assignment create --assignee-object-id $PRINCIPAL_ID --assignee-principal-type ServicePrincipal --scope $ALB_SUBNET_ID --role "4d97b98b-1d4f-4787-a291-c67834d212e7" \n\n# Create the instance of the Application Load Balancer in the cluster.\nkubectl apply -f - <<EOF\napiVersion: alb.networking.azure.io/v1\nkind: ApplicationLoadBalancer\nmetadata:\n  name: alb-test\nspec:\n  associations:\n  - $ALB_SUBNET_ID\nEOF\n\n# Monitor the state of the ALB Setup until it\'s ready\nkubectl get applicationloadbalancer alb-test -o yaml -w\n'})}),"\n",(0,r.jsx)(n.h3,{id:"deploy-the-test-app",children:"Deploy the test app"}),"\n",(0,r.jsx)(n.p,{children:"Now that we have the environment all set up we can deploy a simple test app, gateway and http-route. For this, we'll test TLS offload, so we'll upload a self signed certificate as a secret and used that for the application ingress over https."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Deploy the test application\nkubectl apply -f testapp.yaml\n\n# Create the TLS Secret and Gateway config\nkubectl apply -f gateway.yaml\n\n# Create the http route\nkubectl apply -f http-route.yaml\n\n# Get the FQDN for the gateway\nFQDN=$(kubectl get gateway gateway-01 -o jsonpath='{.status.addresses[0].value}')\n\n# Run a test curl to ensure you get a response\ncurl --insecure https://$FQDN/\n"})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var a=t(6540);const r={},o=a.createContext(r);function s(e){const n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);